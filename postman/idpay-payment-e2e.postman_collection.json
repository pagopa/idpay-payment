{
	"info": {
		"_postman_id": "a07862df-14e5-4682-8db0-e252d6142b9a",
		"name": "IDPay Payment - e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26036679",
		"_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26036679-a07862df-14e5-4682-8db0-e252d6142b9a?action=share&creator=26036679&source=collection_link"
	},
	"item": [
		{
			"name": "Happy case",
			"item": [
				{
					"name": "Initiative creation",
					"item": [
						{
							"name": "ENTE - Initiative creation",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO Initiative with criteria and discount ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r",
													"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId_exhausted', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
													"\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', 500);\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', today);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId_exhausted",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId_exhausted",
													"value": "{{initiativeId_exhausted}}"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/beneficiary",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId_exhausted}}",
												"beneficiary"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId_exhausted",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId_exhausted",
													"value": "{{initiativeId_exhausted}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"/*\r",
													"let refundType = \"timeParameter\";\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = \"timeParameter\";\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"*/\r",
													"/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
													"const body = {\r",
													"    timeParameter: {\r",
													"        timeType: timeType[timeTypeRandomIndex]\r",
													"    }\r",
													"};\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId_exhausted",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId_exhausted",
													"value": "{{initiativeId_exhausted}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/approved",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId_exhausted}}",
												"approved"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId_exhausted}}",
												"published"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Upload csv",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload csv",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Upload csv - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/ranaldoda/Downloads/Esercente_di_test_IdPay.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId_exhausted}}/upload",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"initiative",
												"{{initiativeId_exhausted}}",
												"upload"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Merchant list on initiative",
							"item": [
								{
									"name": "Get Merchant List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Get merchant list - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
													"\r",
													"    const response = pm.response.json().content[0];\r",
													"    pm.expect(response).have.property(\"merchantId\");\r",
													"    pm.expect(response).have.property(\"businessName\");\r",
													"    pm.expect(response).have.property(\"fiscalCode\");\r",
													"    pm.expect(response).have.property(\"merchantStatus\");\r",
													"    pm.expect(response).have.property(\"updateStatusDate\");\r",
													"\r",
													"    //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
													"    pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlMerchant}}/initiative/{{initiativeId_exhausted}}/merchants",
											"host": [
												"{{baseUrlMerchant}}"
											],
											"path": [
												"initiative",
												"{{initiativeId_exhausted}}",
												"merchants"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Onboarding",
					"item": [
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept T&C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{apimSubscriptionKey}}",
										"type": "text"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/onboarding/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"onboarding",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Prerequisites Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{apimSubscriptionKey}}",
										"type": "text"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/onboarding/initiative",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"onboarding",
										"initiative"
									]
								}
							},
							"response": []
						},
						{
							"name": "PDND + Autocertification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/onboarding/consent",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"onboarding",
										"consent"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancel transaction by merchant",
					"item": [
						{
							"name": "Generate Merchant Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/merchant/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"merchant",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Create Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let trxCode = jsonResponse.trxCode;\r",
											"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
											"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
											"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
											"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
											"\r",
											"pm.collectionVariables.set(\"trxDate\", today);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
											"\r",
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Pre-Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
											"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
											"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"relate-user"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Authorize Transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
											"    let initiativeBudgetEuro = jsonResponse.counters.initiativeBudget * 100;\r",
											"    let totalRewardEuro = jsonResponse.counters.totalReward * 100;\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);\r",
											"pm.collectionVariables.set(\"rewardAmount\", pm.response.json().reward);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"authorize"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Cancel transaction by merchant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions",
										":transactionId"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "{{transactionId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Merchant Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case - Get merchant transactions list - checking response is an empty list\", function () {\r",
											"    let jsonResponse = pm.response.json()\r",
											"    pm.expect(jsonResponse.content.length).equals(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 13000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
									"host": [
										"{{baseUrlMerchant}}"
									],
									"path": [
										"portal",
										"initiatives",
										"{{initiativeId_exhausted}}",
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancel transaction by citizen",
					"item": [
						{
							"name": "Generate Merchant Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Generate Portal Token (Merchant)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/merchant/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"merchant",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Create Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let trxCode = jsonResponse.trxCode;\r",
											"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
											"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
											"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
											"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
											"\r",
											"pm.collectionVariables.set(\"trxDate\", today);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
											"\r",
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Happy case - Cancel transaction by citizen - Generate Token IO', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Pre-Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
											"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
											"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"relate-user"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Cancel transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Merchant Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Get merchant transactions list - Response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Get merchant transactions list - checking trxCode and status: CREATED\", function () {\r",
											"     let jsonResponse = pm.response.json()\r",
											"     const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
											"    pm.expect(jsonResponse.content[0].trxCode).equals(`${trxCode}`);\r",
											"    pm.expect(jsonResponse.content[0].status).equals(\"CREATED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
									"host": [
										"{{baseUrlMerchant}}"
									],
									"path": [
										"portal",
										"initiatives",
										"{{initiativeId_exhausted}}",
										"transactions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Transaction 1",
					"item": [
						{
							"name": "Generate Merchant Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/merchant/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"merchant",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Create Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let trxCode = jsonResponse.trxCode;\r",
											"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
											"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
											"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
											"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
											"\r",
											"pm.collectionVariables.set(\"trxDate\", today);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
											"\r",
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Pre-Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
											"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
											"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"relate-user"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
											"    let initiativeBudgetEuro = jsonResponse.counters.initiativeBudget * 100;\r",
											"    let totalRewardEuro = jsonResponse.counters.totalReward * 100;\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);\r",
											"pm.collectionVariables.set(\"rewardAmount\", pm.response.json().reward);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"authorize"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Merchant Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount,rewardAmount,qrcodePngUrl and qrcodeTxtUrl values\", function () {\r",
											"    let jsonResponse = pm.response.json()\r",
											"    const effectiveAmount = pm.collectionVariables.get(\"effectiveAmount\");\r",
											"    const rewardAmount = pm.collectionVariables.get(\"rewardAmount\");\r",
											"    let trxCode = jsonResponse.content[0].trxCode;\r",
											"    pm.expect(jsonResponse.content[0].effectiveAmount).equals(parseInt(`${effectiveAmount}`));\r",
											"    pm.expect(jsonResponse.content[0].rewardAmount).equals(parseInt(`${rewardAmount}`));\r",
											"    pm.expect(jsonResponse.content[0].qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
											"    pm.expect(jsonResponse.content[0].qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
									"host": [
										"{{baseUrlMerchant}}"
									],
									"path": [
										"portal",
										"initiatives",
										"{{initiativeId_exhausted}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Confirm Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"",
										"transactions",
										":transactionId",
										"confirm"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "{{transactionId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Transaction 2",
					"item": [
						{
							"name": "Generate Merchant Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/merchant/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"merchant",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Create Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
											"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
											"\r",
											"pm.collectionVariables.set(\"trxDate\", today);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Pre-Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
											"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
											"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"relate-user"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Authorize Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
											"    pm.expect(jsonResponse.residualBudget).to.eql(jsonResponse.counters.initiativeBudget-jsonResponse.counters.totalReward);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);\r",
											"pm.collectionVariables.set(\"rewardAmount\", pm.response.json().reward);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 7000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"authorize"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Merchant Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount and rewardAmount values\", function () {\r",
											"     let jsonResponse = pm.response.json()\r",
											"     const effectiveAmount = pm.collectionVariables.get(\"effectiveAmount\");\r",
											"     const rewardAmount = pm.collectionVariables.get(\"rewardAmount\");\r",
											"    pm.expect(jsonResponse.content[0].effectiveAmount).equals(parseInt(`${effectiveAmount}`));\r",
											"    pm.expect(jsonResponse.content[0].rewardAmount).equals(parseInt(`${rewardAmount}`));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
									"host": [
										"{{baseUrlMerchant}}"
									],
									"path": [
										"portal",
										"initiatives",
										"{{initiativeId_exhausted}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Confirm Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"",
										"transactions",
										":transactionId",
										"confirm"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "{{transactionId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unhappy case",
			"item": [
				{
					"name": "Initiative creation",
					"item": [
						{
							"name": "ENTE - Initiative creation",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO Initiative with criteria and discount ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r",
													"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
													"\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', 1200);\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', today);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"beneficiary"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"/*\r",
													"let refundType = \"timeParameter\";\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = \"timeParameter\";\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"*/\r",
													"/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
													"const body = {\r",
													"    timeParameter: {\r",
													"        timeType: timeType[timeTypeRandomIndex]\r",
													"    }\r",
													"};\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"approved"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"published"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Upload csv",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload csv",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Upload csv - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/ranaldoda/Downloads/Esercente_di_test_IdPay.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"initiative",
												"{{initiativeId}}",
												"upload"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Merchant list on initiative",
							"item": [
								{
									"name": "Get Merchant List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Get merchant list - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
													"\r",
													"    const response = pm.response.json().content[0];\r",
													"    pm.expect(response).have.property(\"merchantId\");\r",
													"    pm.expect(response).have.property(\"businessName\");\r",
													"    pm.expect(response).have.property(\"fiscalCode\");\r",
													"    pm.expect(response).have.property(\"merchantStatus\");\r",
													"    pm.expect(response).have.property(\"updateStatusDate\");\r",
													"\r",
													"    //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
													"    pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
											"host": [
												"{{baseUrlMerchant}}"
											],
											"path": [
												"initiative",
												"{{initiativeId}}",
												"merchants"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Onboarding",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Onboarding - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PAYMENT_GENERIC_REJECTED",
					"item": [
						{
							"name": "Generate Merchant Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/merchant/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"merchant",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate TokenIO - Another user related(200)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP1] - Retrieve Token - Response status is 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACQUIRER] Create Transaction - Another user realted (201)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_2][ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
											"\r",
											"pm.collectionVariables.set(\"trxDate\", today);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
											"\r",
											"setTimeout(() => {}, 10000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{merchantPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "x-merchant-id",
										"value": "{{merchantId}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"merchant",
										"portal",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate TokenIO - Another user related second user(200)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_3] Retrieve Token for second user- Response status is 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "{{Ocp-Apim-Trace}}",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bpd",
										"pagopa",
										"api",
										"v1",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[IO] Pre-Authorize Transaction - Another user realted (403)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
											"    pm.expect(responseJson.code).to.eql(\"PAYMENT_GENERIC_REJECTED\")\r",
											"    pm.expect(responseJson.message).to.eql(`Transaction with trxCode [${trxCode}] is rejected`);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{tokenIO}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "x-user-id",
										"value": "DUMMYUSERID",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"payment",
										"qr-code",
										":trxCode",
										"relate-user"
									],
									"variable": [
										{
											"key": "trxCode",
											"value": "{{trxCode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QRCode Create transaction",
					"item": [
						{
							"name": "Initiative not found - 404",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Initiative not found (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR Code create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE]- Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR Code create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] - Response contains info about a not existing initiativeId\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"NOT FOUND\");\r",
													"    pm.expect(responseJson.message).to.eql(\"Cannot find initiative with ID: [initiativeIdFake]\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_fake}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "QRCode Pre-Authorize Transaction",
					"item": [
						{
							"name": "TokenIO not valid - 401",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - TokenIO not valid (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TOKENIO_NOT_VALID][STEP_1][ACQUIRER] Create transaction [QR-CODE] Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - TokenIO not valid (401)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TOKENIO_NOT_VALID][STEP_2][IO] Pre-Authorize transaction with tokenIO not valid [QR-CODE] - Response status is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_fake}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Another user related - 403",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Authorize another user related (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Authorize another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Authorize another user: token for second user (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_4] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
													"    pm.expect(responseJson.message).to.eql(`Transaction with trxCode [${trxCode}] is already assigned to another user`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transaction not found - 404",
							"item": [
								{
									"name": "Generate TokenIO - Transaction not found (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Transaction not found (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] [IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a transaction not found\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    const trxCodeFake = pm.collectionVariables.get(\"trxCode_fake\");\r",
													"    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_EXPIRED\")\r",
													"    pm.expect(responseJson.message).to.eql(`Cannot find transaction with trxCode [${trxCodeFake}]`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode_fake}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "QRCode Cancel transaction by citizen",
					"item": [
						{
							"name": "Transaction not found - 404",
							"item": [
								{
									"name": "Generate Token IO - Authorize transaction not found (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QRCode Cancel transaction by citizen - [AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QRCode Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode_fake}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transaction not in status IDENTIFIED - 400",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED -Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED -Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    let trxCode = jsonResponse.trxCode;\r",
													"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													"\r",
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Transaction not in status IDENTIFIED - Cancel transaction by citizen - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED - Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Another user try to cancel transaction - 403",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    let trxCode = jsonResponse.trxCode;\r",
													"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													"\r",
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Another user try to cancel transaction - Cancel transaction by citizen - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
													"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
													"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
													"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Another user try to cancel transaction - Cancel transaction by citizen - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "QRCode Authorize Transaction",
					"item": [
						{
							"name": "Status not IDENTIFIED / AUTHORIZED - 400",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Status not expected (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Status not expected (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction - Status not expected (400)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_3][IO] Authorize transaction [QR-CODE] - Response status is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_3][IO] Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.message).to.eql(\"Cannot relate transaction in status CREATED\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Another user related - 403",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 2s\r",
													"tests[\"Response time is less than s\"] = responseTime < 2000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Authorize another user related (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Authorize another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Authorize another user: token for second user (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_4] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction - Authorize another user related (403)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_5] [IO] Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_5] [IO] Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
													"    pm.expect(responseJson.message).to.eql(`Transaction with trxCode [${trxCode}] is already assigned to another user`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transaction not found - 404",
							"item": [
								{
									"name": "Generate Token IO - Authorize transaction not found (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction - Authorize transaction not found (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][TRX_NOT_FOUND][STEP_2] [IO] Authorize transaction [QR-CODE] - Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [PRE_AUTH_TRX][OTHER_USER_RELATED][STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    const trxCodeFake = pm.collectionVariables.get(\"trxCode_fake\");\r",
													"    pm.expect(responseJson.message).to.eql(`Cannot find transaction with trxCode [${trxCodeFake}]`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode_fake}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "QRCode Confirm Transaction",
					"item": [
						{
							"name": "Transaction status not AUTHORIZED - 400",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction  - Confirm transaction: status not authorized (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_STATUS_NOT_AUTHORIZED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Confirm transaction: status not authorized (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_STATUS_NOT_AUTHORIZED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction - Confirm transaction: status not authorized (400)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_STATUS_NOT_AUTHORIZED][STEP_3] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"",
												"transactions",
												":transactionId",
												"confirm"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Another merchant related transaction - 403",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Confirm transaction: another user related (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Confirm transaction: another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Confirm transaction: another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction - Confirm transaction: another user related (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_4] [IO] Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"1\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction - Confirm transaction for second user: another user related (403)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_5] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "DUMMYMERCHANTID",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"",
												"transactions",
												":transactionId",
												"confirm"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transaction not found - 404",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction - Confirm transaction: transaction not found (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_NOT_FOUND] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{x-merchant-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"",
												"transactions",
												":transactionId",
												"confirm"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "DUMMYTRXID"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Transaction alredy processed - 404",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction - Confirm transaction: transaction already processed (201)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO - Confirm transaction: transaction already processed (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction - Confirm transaction: transaction already processed (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction - Confirm transaction: transaction already processed (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_4] [IO] Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction - Confirm transaction 1: transaction already processed (200)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_5] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"",
												"transactions",
												":transactionId",
												"confirm"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction - Confirm transaction 2: transaction already processed (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_6] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"",
												"transactions",
												":transactionId",
												"confirm"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Budget exhausted",
					"item": [
						{
							"name": "Create Transaction",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Budget exhausted - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Payment - Unhappy case - Budget exhausted - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													"pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"500\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Budget exhausted - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Budget exhausted - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Budget exhausted - [IO] Pre-Authorize transaction [QR-CODE] - Verify response is: Budget exhausted for user and initiative\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    const initiativeId_exhausted = pm.collectionVariables.get(\"initiativeId_exhausted\");\r",
													"\r",
													"    pm.expect(jsonResponse.message).to.eql(`Budget exhausted for user [ef87b460-9943-4abe-9a84-8f2a1738ce69] and initiative [${initiativeId_exhausted}]`);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Merchant Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case - Budget exhausted - Get merchant transactions list - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case - Budget exhausted - Get merchant transactions list - checking effectiveAmount and rewardAmount values\", function () {\r",
													"     let jsonResponse = pm.response.json()\r",
													"     const effectiveAmount = pm.collectionVariables.get(\"effectiveAmount\");\r",
													"    pm.expect(jsonResponse.content[0].effectiveAmount).equals(parseInt(`${effectiveAmount}`));\r",
													"    pm.expect(jsonResponse.content[0].rewardAmount).equals(0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
											"host": [
												"{{baseUrlMerchant}}"
											],
											"path": [
												"portal",
												"initiatives",
												"{{initiativeId_exhausted}}",
												"transactions"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Cancel transaction by merchant",
					"item": [
						{
							"name": "Transaction not found - 404",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Cancel transaction by merchant - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction by merchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - [IO] Cancel transaction\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions",
												":transactionId"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId_fake}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Another merchant try to cancel transaction - 403",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    let trxCode = jsonResponse.trxCode;\r",
													"    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://www.idpay.it/authorizationlink/${trxCode}`);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													"\r",
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction -  Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bpd/pagopa/api/v1/login?fiscalCode={{CF_1}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bpd",
												"pagopa",
												"api",
												"v1",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
													"    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
													"    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
													"    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"test\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/merchant/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"merchant",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction by merchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [IO] Cancel transaction\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{merchantPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"merchant",
												"portal",
												"transactions",
												":transactionId"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "trxCode",
			"value": ""
		},
		{
			"key": "transactionId",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": "648adcaf3d8a95556915f514",
			"type": "string"
		},
		{
			"key": "trxDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenIO",
			"value": ""
		},
		{
			"key": "randomNum",
			"value": ""
		},
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "identityPortalTokenPagopa",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "rankingEnabled",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "rewardRuleType",
			"value": ""
		},
		{
			"key": "rewardValueType",
			"value": ""
		},
		{
			"key": "rewardRuleValue",
			"value": ""
		},
		{
			"key": "trxDaysOfWeek",
			"value": ""
		},
		{
			"key": "trxDayEndTime",
			"value": ""
		},
		{
			"key": "trxThresholdFrom",
			"value": ""
		},
		{
			"key": "trxThresholdTo",
			"value": ""
		},
		{
			"key": "trxCountFrom",
			"value": ""
		},
		{
			"key": "trxCountTo",
			"value": ""
		},
		{
			"key": "trxRewardLimitFrequency",
			"value": ""
		},
		{
			"key": "trxRewardLimitValue",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "merchantId",
			"value": "3a602b17-ac1c-3029-9e78-0a4bbb8693d4"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "initiativeId_fake",
			"value": "initiativeIdFake",
			"type": "string"
		},
		{
			"key": "token_fake",
			"value": "tokenFake",
			"type": "string"
		},
		{
			"key": "trxCode_fake",
			"value": "trxCodeFake",
			"type": "string"
		},
		{
			"key": "merchantPortalToken",
			"value": ""
		},
		{
			"key": "effectiveAmount",
			"value": ""
		},
		{
			"key": "rewardAmount",
			"value": ""
		},
		{
			"key": "initiativeId_exhausted",
			"value": ""
		},
		{
			"key": "transactionId_fake",
			"value": "transactionId_fake"
		}
	]
}