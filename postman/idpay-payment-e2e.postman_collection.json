{
  "info": {
    "_postman_id": "0752c444-a0dc-4b7e-afcb-37dd2c64319e",
    "name": "IDPay Payment - e2e Last version",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26036679",
    "_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26036679-0752c444-a0dc-4b7e-afcb-37dd2c64319e?action=share&source=collection_link&creator=26036679"
  },
  "item": [
    {
      "name": "QrCode",
      "item": [
        {
          "name": "Happy case",
          "item": [
            {
              "name": "Different counter version but same reward - OK",
              "item": [
                {
                  "name": "Initiative creation",
                  "item": [
                    {
                      "name": "ENTE - Initiative creation",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP1-Insert Initiative (Service Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                  "const serviceName = 'Test funzionali App IO QRCODE ' + now;\r",
                                  "pm.collectionVariables.set('serviceName', serviceName);\r",
                                  "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "\r",
                                  "pm.collectionVariables.set('channel_type', 'web');\r",
                                  "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "var jsonData = JSON.parse(responseBody);\r",
                                  "// console.log('jsondata', jsonData);\r",
                                  "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                                  "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                                  "    pm.response.to.have.status(201);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/info",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["info"]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP2-Update Initiative (general Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "//Format: YYYY-MM-DD\r",
                                  "let today = String(moment().format('YYYY-MM-DD'));\r",
                                  "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "\r",
                                  "/*\r",
                                  "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                                  "pm.collectionVariables.set('...', _.random(0, 180));\r",
                                  "*/\r",
                                  "//_.random(1.0, 100000.0, true)\r",
                                  "pm.collectionVariables.set('budget', 500);\r",
                                  "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                                  "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                                  "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                                  "pm.collectionVariables.set('rankingEnabled', false);\r",
                                  "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                                  "pm.collectionVariables.set('rankingStartDate', today);\r",
                                  "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                                  "pm.collectionVariables.set('startDate', today);\r",
                                  "pm.collectionVariables.set('endDate', todayP3);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "general"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP3-Update Initiative (criteria)",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "beneficiary"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP4-Update Initiative Trx-Reward rules",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "const d = new Date();\r",
                                  "dateString = d.toISOString()\r",
                                  "let endTime = dateString.split('T');\r",
                                  "endTime = endTime[1].split('Z');\r",
                                  "\r",
                                  "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                                  "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                                  "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                                  "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                                  "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                                  "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                                  "} else {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                                  "}\r",
                                  "\r",
                                  "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                                  "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                                  "pm.collectionVariables.set('trxThresholdFrom', 10);\r",
                                  "pm.collectionVariables.set('trxThresholdTo', 50);\r",
                                  "pm.collectionVariables.set('trxCountFrom', 3);\r",
                                  "pm.collectionVariables.set('trxCountTo', 11);\r",
                                  "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                                  "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"rewardValue\",\n    \"rewardValue\": 100,\n    \"rewardValueType\": \"PERCENTAGE\"\n  },\n  \"trxRule\": {}\n}\n",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/reward",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "reward"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP5-Update Initiative Refund Rule",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                                  "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "*/\r",
                                  "\r",
                                  "/*\r",
                                  "let refundType = \"timeParameter\";\r",
                                  "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                                  "\r",
                                  "const refundTypeSelected = \"timeParameter\";\r",
                                  "let body = {};\r",
                                  "if (refundTypeSelected == \"timeParameter\") {\r",
                                  "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "    body = {\r",
                                  "        timeParameter: {\r",
                                  "            timeType: timeType[timeTypeRandomIndex]\r",
                                  "        }\r",
                                  "    };\r",
                                  "} else {\r",
                                  "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                                  "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                                  "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                                  "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                                  "            }\r",
                                  "        };\r",
                                  "    } else {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                                  "                refundThreshold: 10\r",
                                  "            }\r",
                                  "        };\r",
                                  "    }\r",
                                  "}\r",
                                  "*/\r",
                                  "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                                  "const body = {\r",
                                  "    timeParameter: {\r",
                                  "        timeType: timeType[timeTypeRandomIndex]\r",
                                  "    }\r",
                                  "};\r",
                                  "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "refund"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "PAGOPA - Initiative update status APPROVED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update initiative into APPROVED status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalTokenPagopa}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "approved"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "ENTE - Initiative PUBLISHED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Initiative PUBLISHED",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});\r",
                                  "\r",
                                  "waitDroolsRuleSync(setTimeout);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*let body;\r",
                                  "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                                  "if(baseUrlInitiative.includes('localhost')){\r",
                                  "    body = {\r",
                                  "        mode: 'raw',\r",
                                  "        raw: JSON.stringify({\r",
                                  "            organizationName: 'Comune di Milano',\r",
                                  "            organizationFiscalCode: '11122233344',\r",
                                  "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                                  "            organizationUserRole: 'admin'\r",
                                  "        })\r",
                                  "    }\r",
                                  "    pm.request.headers.add({\r",
                                  "        key: \"Content-Type\",\r",
                                  "        value: \"application/json\"\r",
                                  "    });\r",
                                  "    pm.variables.set('body', JSON.stringify(body));\r",
                                  "    pm.request.body.update(body);\r",
                                  "}\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disabledSystemHeaders": {}
                          },
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "published"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Upload csv",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Upload csv",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Upload csv - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "formdata",
                              "formdata": [
                                {
                                  "key": "file",
                                  "type": "file",
                                  "src": "./postman/Esercente di test IdPay.csv"
                                }
                              ]
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                              "host": ["{{baseUrlToken}}"],
                              "path": [
                                "merchant",
                                "initiative",
                                "{{initiativeId}}",
                                "upload"
                              ],
                              "query": [
                                {
                                  "key": "",
                                  "value": null,
                                  "disabled": true
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Get Merchant list on initiative",
                      "item": [
                        {
                          "name": "Get Merchant List",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Get merchant list - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().content.length == 0) {\r",
                                  "    retryRequest(postman, pm, setTimeout);\r",
                                  "} else {\r",
                                  "        pm.test(\"Payment - Happy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                                  "\r",
                                  "        const response = pm.response.json().content[0];\r",
                                  "        pm.expect(response).have.property(\"merchantId\");\r",
                                  "        pm.expect(response).have.property(\"businessName\");\r",
                                  "        pm.expect(response).have.property(\"fiscalCode\");\r",
                                  "        pm.expect(response).have.property(\"merchantStatus\");\r",
                                  "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                                  "\r",
                                  "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                                  "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                                  "        pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                                  "    });\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                              "host": ["{{baseUrlMerchant}}"],
                              "path": [
                                "initiative",
                                "{{initiativeId}}",
                                "merchants"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "type": "text/javascript",
                            "exec": [""]
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [""]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "const jsonResponse = pm.response.json();\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                              "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                              "});\r",
                              "\r",
                              "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "} else {\r",
                              "    waitHpanLookupUpdate(setTimeout)\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Create Transactions",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[MERCHANT-PORTAL] Create Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode1\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[MERCHANT-PORTAL] Create Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode2\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                              "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                              "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                              "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                              "    pm.expect(jsonResponse.counterVersion).to.eql(2);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                              "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Merchant Transactions",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount,rewardAmount,qrcodePngUrl and qrcodeTxtUrl values\", function () {\r",
                              "    let jsonResponse = pm.response.json()\r",
                              "    const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                              "    const rewardAmount = pm.collectionVariables.get(\"rewardAmountCents\");\r",
                              "    let trxCode = jsonResponse.content[0].trxCode;\r",
                              "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                              "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmount}`));\r",
                              "    pm.expect(jsonResponse.content[0].qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.content[0].qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId}}/transactions",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "portal",
                            "initiatives",
                            "{{initiativeId}}",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Delete Initiative initiativeId",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy Case - Delete Initiative initativeId_exhausted - Status test 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                      "host": [
                        "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                      ],
                      "path": ["idpay", "initiative", "{{initiativeId}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO QRCODE ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "var jsonData = JSON.parse(responseBody);\r",
                              "// console.log('jsondata', jsonData);\r",
                              "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                              "pm.collectionVariables.set('initiativeId_exhausted', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.random(1.0, 100000.0, true)\r",
                              "pm.collectionVariables.set('budget', 500);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "general"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 10);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 50);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"rewardValue\",\n    \"rewardValue\": 100,\n    \"rewardValueType\": \"PERCENTAGE\"\n  },\n  \"trxRule\": {}\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "waitDroolsRuleSync(setTimeout);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/Esercente di test IdPay.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId_exhausted}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId_exhausted}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().content.length == 0) {\r",
                              "    retryRequest(postman, pm, setTimeout);\r",
                              "} else {\r",
                              "        pm.test(\"Payment - Happy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "        const response = pm.response.json().content[0];\r",
                              "        pm.expect(response).have.property(\"merchantId\");\r",
                              "        pm.expect(response).have.property(\"businessName\");\r",
                              "        pm.expect(response).have.property(\"fiscalCode\");\r",
                              "        pm.expect(response).have.property(\"merchantStatus\");\r",
                              "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "\r",
                              "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                              "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                              "        pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                              "    });\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId_exhausted}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId_exhausted}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ],
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "exec": [""]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [""]
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Onboarding Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "const jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                          "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                          "});\r",
                          "\r",
                          "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId_exhausted}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "onboarding",
                        "{{initiativeId_exhausted}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Wallet Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "} else {\r",
                          "    waitHpanLookupUpdate(setTimeout)\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId_exhausted}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId_exhausted}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Cancel transaction by merchant",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[MERCHANT-PORTAL] Create Transaction",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      },
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"{{idTrxAcquirer}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Cancel transaction by merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["waitPaymentThrottling(setTimeout);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      },
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "transactions",
                        ":transactionId"
                      ],
                      "variable": [
                        {
                          "key": "transactionId",
                          "value": "{{transactionId}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking response is an empty list\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.content.length).equals(0);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Cancel transaction by citizen",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[MERCHANT-PORTAL] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"{{idTrxAcquirer}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - Cancel transaction by citizen - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Cancel transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "payment", "qr-code", ":trxCode"],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction - Get merchant transactions list - checking trxCode and status: CREATED\", function () {\r",
                          "     let jsonResponse = pm.response.json()\r",
                          "     const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.content[0].trxCode).equals(`${trxCode}`);\r",
                          "    pm.expect(jsonResponse.content[0].status).equals(\"CREATED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create Transaction 1",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[MERCHANT-PORTAL] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount,rewardAmount,qrcodePngUrl and qrcodeTxtUrl values\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                          "    const rewardAmount = pm.collectionVariables.get(\"rewardAmountCents\");\r",
                          "    let trxCode = jsonResponse.content[0].trxCode;\r",
                          "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.content[0].qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Confirm Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const wait = pm.collectionVariables.get(\"wait\");\r",
                          "setTimeout(() => {}, wait);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "3a602b17-ac1c-3029-9e78-0a4bbb8693d4",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                      "host": ["{{paymentServerUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "{{transactionId}}",
                        "confirm"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create Transaction 2",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[MERCHANT-PORTAL] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount and rewardAmount values\", function () {\r",
                          "     let jsonResponse = pm.response.json()\r",
                          "     const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                          "     const rewardAmount = pm.collectionVariables.get(\"rewardAmountCents\");\r",
                          "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmount}`));\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Confirm Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const wait = pm.collectionVariables.get(\"wait\");\r",
                          "setTimeout(() => {}, wait);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                      "host": ["{{paymentServerUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "{{transactionId}}",
                        "confirm"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy case",
          "item": [
            {
              "name": "Different counter version and reward - REJECTED",
              "item": [
                {
                  "name": "Initiative creation",
                  "item": [
                    {
                      "name": "ENTE - Initiative creation",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP1-Insert Initiative (Service Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                  "const serviceName = 'Test funzionali App IO QRCODE ' + now;\r",
                                  "pm.collectionVariables.set('serviceName', serviceName);\r",
                                  "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "\r",
                                  "pm.collectionVariables.set('channel_type', 'web');\r",
                                  "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "var jsonData = JSON.parse(responseBody);\r",
                                  "// console.log('jsondata', jsonData);\r",
                                  "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                                  "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                                  "    pm.response.to.have.status(201);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/info",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["info"]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP2-Update Initiative (general Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "//Format: YYYY-MM-DD\r",
                                  "let today = String(moment().format('YYYY-MM-DD'));\r",
                                  "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "\r",
                                  "/*\r",
                                  "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                                  "pm.collectionVariables.set('...', _.random(0, 180));\r",
                                  "*/\r",
                                  "//_.random(1.0, 100000.0, true)\r",
                                  "pm.collectionVariables.set('budget', 500);\r",
                                  "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                                  "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                                  "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                                  "pm.collectionVariables.set('rankingEnabled', false);\r",
                                  "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                                  "pm.collectionVariables.set('rankingStartDate', today);\r",
                                  "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                                  "pm.collectionVariables.set('startDate', today);\r",
                                  "pm.collectionVariables.set('endDate', todayP3);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "general"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP3-Update Initiative (criteria)",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "beneficiary"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP4-Update Initiative Trx-Reward rules",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "const d = new Date();\r",
                                  "dateString = d.toISOString()\r",
                                  "let endTime = dateString.split('T');\r",
                                  "endTime = endTime[1].split('Z');\r",
                                  "\r",
                                  "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                                  "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                                  "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                                  "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                                  "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                                  "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                                  "} else {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                                  "}\r",
                                  "\r",
                                  "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                                  "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                                  "pm.collectionVariables.set('trxThresholdFrom', 10);\r",
                                  "pm.collectionVariables.set('trxThresholdTo', 50);\r",
                                  "pm.collectionVariables.set('trxCountFrom', 3);\r",
                                  "pm.collectionVariables.set('trxCountTo', 11);\r",
                                  "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                                  "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"rewardValue\",\n    \"rewardValue\": 100,\n    \"rewardValueType\": \"PERCENTAGE\"\n  },\n  \"trxRule\": {}\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/reward",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "reward"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP5-Update Initiative Refund Rule",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                                  "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "*/\r",
                                  "\r",
                                  "/*\r",
                                  "let refundType = \"timeParameter\";\r",
                                  "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                                  "\r",
                                  "const refundTypeSelected = \"timeParameter\";\r",
                                  "let body = {};\r",
                                  "if (refundTypeSelected == \"timeParameter\") {\r",
                                  "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "    body = {\r",
                                  "        timeParameter: {\r",
                                  "            timeType: timeType[timeTypeRandomIndex]\r",
                                  "        }\r",
                                  "    };\r",
                                  "} else {\r",
                                  "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                                  "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                                  "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                                  "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                                  "            }\r",
                                  "        };\r",
                                  "    } else {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                                  "                refundThreshold: 10\r",
                                  "            }\r",
                                  "        };\r",
                                  "    }\r",
                                  "}\r",
                                  "*/\r",
                                  "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                                  "const body = {\r",
                                  "    timeParameter: {\r",
                                  "        timeType: timeType[timeTypeRandomIndex]\r",
                                  "    }\r",
                                  "};\r",
                                  "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId_exhausted", "refund"],
                              "variable": [
                                {
                                  "key": "initiativeId_exhausted",
                                  "value": "{{initiativeId}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "PAGOPA - Initiative update status APPROVED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update initiative into APPROVED status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalTokenPagopa}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "approved"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "ENTE - Initiative PUBLISHED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Initiative PUBLISHED",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});\r",
                                  "\r",
                                  "waitDroolsRuleSync(setTimeout);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*let body;\r",
                                  "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                                  "if(baseUrlInitiative.includes('localhost')){\r",
                                  "    body = {\r",
                                  "        mode: 'raw',\r",
                                  "        raw: JSON.stringify({\r",
                                  "            organizationName: 'Comune di Milano',\r",
                                  "            organizationFiscalCode: '11122233344',\r",
                                  "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                                  "            organizationUserRole: 'admin'\r",
                                  "        })\r",
                                  "    }\r",
                                  "    pm.request.headers.add({\r",
                                  "        key: \"Content-Type\",\r",
                                  "        value: \"application/json\"\r",
                                  "    });\r",
                                  "    pm.variables.set('body', JSON.stringify(body));\r",
                                  "    pm.request.body.update(body);\r",
                                  "}\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disabledSystemHeaders": {}
                          },
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "published"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Upload csv",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Upload csv",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Upload csv - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "formdata",
                              "formdata": [
                                {
                                  "key": "file",
                                  "type": "file",
                                  "src": "./postman/Esercente di test IdPay.csv"
                                }
                              ]
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                              "host": ["{{baseUrlToken}}"],
                              "path": [
                                "merchant",
                                "initiative",
                                "{{initiativeId}}",
                                "upload"
                              ],
                              "query": [
                                {
                                  "key": "",
                                  "value": null,
                                  "disabled": true
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Get Merchant list on initiative",
                      "item": [
                        {
                          "name": "Get Merchant List",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Get merchant list - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().content.length == 0) {\r",
                                  "    retryRequest(postman, pm, setTimeout);\r",
                                  "} else {\r",
                                  "        pm.test(\"Payment - Happy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                                  "\r",
                                  "        const response = pm.response.json().content[0];\r",
                                  "        pm.expect(response).have.property(\"merchantId\");\r",
                                  "        pm.expect(response).have.property(\"businessName\");\r",
                                  "        pm.expect(response).have.property(\"fiscalCode\");\r",
                                  "        pm.expect(response).have.property(\"merchantStatus\");\r",
                                  "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                                  "\r",
                                  "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                                  "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                                  "        pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                                  "    });\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                              "host": ["{{baseUrlMerchant}}"],
                              "path": [
                                "initiative",
                                "{{initiativeId}}",
                                "merchants"
                              ]
                            }
                          },
                          "response": []
                        }
                      ],
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "type": "text/javascript",
                            "exec": [""]
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "type": "text/javascript",
                            "exec": [""]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "const jsonResponse = pm.response.json();\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                              "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                              "});\r",
                              "\r",
                              "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "} else {\r",
                              "    waitHpanLookupUpdate(setTimeout)\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Create Transactions",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[MERCHANT-PORTAL] Create Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode1\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"8000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[MERCHANT-PORTAL] Create Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode2\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction 1",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                              "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                              "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction 2",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [IO] Authorize transaction [QR-CODE] - Verify response status contains info about ko\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"REJECTED\");\r",
                              "    pm.expect(jsonResponse.rejectionReasons).to.contains(\"PAYMENT_CANNOT_GUARANTEE_REWARD\");\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Delete Initiative initiativeId",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy Case - Delete Initiative initativeId_exhausted - Status test 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                      "host": [
                        "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                      ],
                      "path": ["idpay", "initiative", "{{initiativeId}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO QRCODE ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "var jsonData = JSON.parse(responseBody);\r",
                              "// console.log('jsondata', jsonData);\r",
                              "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                              "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.random(1.0, 100000.0, true)\r",
                              "pm.collectionVariables.set('budget', 1200);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "general"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue',10);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              "\r",
                              "//response time is less than 1s\r",
                              "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "waitDroolsRuleSync(setTimeout);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/Esercente di test IdPay.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().content.length == 0) {\r",
                              "    retryRequest(postman, pm, setTimeout);\r",
                              "} else {\r",
                              "    pm.test(\"Payment - Unhappy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "        const response = pm.response.json().content[0];\r",
                              "        pm.expect(response).have.property(\"merchantId\");\r",
                              "        pm.expect(response).have.property(\"businessName\");\r",
                              "        pm.expect(response).have.property(\"fiscalCode\");\r",
                              "        pm.expect(response).have.property(\"merchantStatus\");\r",
                              "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "\r",
                              "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                              "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                              "        pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                              "    });\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Unhappy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Onboarding Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "const jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                          "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                          "});\r",
                          "\r",
                          "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "onboarding",
                        "{{initiativeId}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Wallet Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "wallet", "{{initiativeId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "QRCode Create transaction",
              "item": [
                {
                  "name": "Initiative not found - 404",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Initiative not found (404)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR Code create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE]- Response status is 404\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR Code create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] - Response contains info about a not existing initiativeId\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_INITIATIVE_NOT_FOUND\");\r",
                              "    pm.expect(responseJson.message).to.eql(\"Cannot find initiative with id [initiativeIdFake]\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_fake}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Amount 0 - 400",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - TokenIO not valid (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR Code create transaction - Amount 0 -[CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR Code create transaction - Amount 0 - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] - Response contains info about a not existing initiativeId\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_AMOUNT_NOT_VALID\");\r",
                              "    pm.expect(responseJson.message).to.eql(\"Cannot create transaction with invalid amount: 0\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"0\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "QRCode Pre-Authorize Transaction",
              "item": [
                {
                  "name": "User not onboarded",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Another user realted (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_2][ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          },
                          {
                            "key": "",
                            "value": "",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate TokenIO - Another user related second user(200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_3] Retrieve Token for second user- Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Another user realted (403)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: PAYMENT_GENERIC_REJECTED [STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_USER_NOT_ONBOARDED\")\r",
                              "    pm.expect(responseJson.message).to.eql(`The current user is not onboarded on initiative [${initiativeId}]`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-user-id",
                            "value": "DUMMYUSERID",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "TokenIO not valid - 401",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - TokenIO not valid (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TOKENIO_NOT_VALID][STEP_1][ACQUIRER] Create transaction [QR-CODE] Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - TokenIO not valid (401)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TOKENIO_NOT_VALID][STEP_2][IO] Pre-Authorize transaction with tokenIO not valid [QR-CODE] - Response status is 401\", function () {\r",
                              "    pm.response.to.have.status(401);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{token_fake}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Another user related - 403",
                  "item": [
                    {
                      "name": "Onboarding",
                      "item": [
                        {
                          "name": "Generate Token IO",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - Onboarding - Generate Token IO', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{genericSubscriptionKey}}",
                                "type": "default"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                              "host": ["{{baseUrl}}"],
                              "path": ["rtd", "mock-io", "login"],
                              "query": [
                                {
                                  "key": "fiscalCode",
                                  "value": "{{CF_FAKE_3}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Accept T&C",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{apimSubscriptionKey}}",
                                "type": "text"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "text"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", ""]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Prerequisites Check",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                                  "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{apimSubscriptionKey}}",
                                "type": "text"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "text"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", "initiative"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "PDND + Autocertification",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                                  "    pm.response.to.have.status(202);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/consent",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", "consent"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Get Onboarding Status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().status != \"ONBOARDING_OK\") {\r",
                                  "    retryRequest(postman, pm, setTimeout, 1000);\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                              "host": ["{{baseUrl}}"],
                              "path": [
                                "idpay",
                                "onboarding",
                                "{{initiativeId}}",
                                "status"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Get Wallet Status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                                  "    retryRequest(postman, pm, setTimeout, 1000);\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                              "host": ["{{baseUrl}}"],
                              "path": [
                                "idpay",
                                "wallet",
                                "{{initiativeId}}",
                                "status"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Authorize another user related (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Authorize another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Authorize another user: token for second user (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_4] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_3}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Transaction with transactionId [${transactionId}] is already assigned to another user`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate TokenIO - Transaction not found (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Transaction not found (404)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 404\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Pre-Authorize transaction - [PRE_AUTH_TRX][TRX_NOT_FOUND][STEP_1] [IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a transaction not found\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const trxCodeFake = pm.collectionVariables.get(\"trxCode_fake\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_OR_EXPIRED\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with trxCode [${trxCodeFake}]`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode_fake}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "QRCode Cancel transaction by citizen",
              "item": [
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate Token IO - Authorize transaction not found (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QRCode Cancel transaction by citizen - [AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Cancel transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QRCode Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QRCode Cancel transaction by citizen - [IO] Cancel transaction - Response contains info about a transaction not found\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const trxCodeFake = pm.collectionVariables.get(\"trxCode_fake\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_OR_EXPIRED\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with trxCode [${trxCodeFake}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "qr-code", ":trxCode"],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode_fake}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction not in status IDENTIFIED - 400",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED -Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED -Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Transaction not in status IDENTIFIED - Cancel transaction by citizen - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Cancel transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED - Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Transaction not in status IDENTIFIED - Cancel transaction by citizen - [IO] Cancel transaction - Response contains info about a transaction not in status identified\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_UNRELATE_NOT_ALLOWED_FOR_TRX_STATUS\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot unrelate transaction with transactionId [${transactionId}] not in status identified`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "qr-code", ":trxCode"],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Another user try to cancel transaction - 403",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Another user try to cancel transaction - Cancel transaction by citizen - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 403);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Another user try to cancel transaction - Cancel transaction by citizen - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_3}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Cancel transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Cancel transaction - Response contains info about a transaction already assigned\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_ALREADY_ASSIGNED\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Transaction with trxCode [${trxCode}] is already assigned to another user`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "qr-code", ":trxCode"],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "QRCode Authorize Transaction",
              "item": [
                {
                  "name": "Status not IDENTIFIED / AUTHORIZED - 400",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Status not expected (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Status not expected (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Status not expected (400)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_3][IO] Authorize transaction [QR-CODE] - Response status is 400\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][STATUS_NOT_EXPECTED][STEP_3][IO] Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_ALLOWED_FOR_TRX_STATUS\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot operate on transaction with transactionId [${transactionId}] in status CREATED`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Another user related - 403",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Authorize another user related (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Authorize another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Authorize another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 403);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Authorize another user: token for second user (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_4] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_3}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Authorize another user related (403)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_5] [IO] Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_5] [IO] Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const trxCode = pm.collectionVariables.get(\"trxCode\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Transaction with trxCode [${trxCode}] is already assigned to another user`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Already authorized  - 403",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Already authorized (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO -Already authorized  (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ALREADY_AUTHORIZED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction(200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [IO] Authorize transaction [QR-CODE]-[ALREADY_AUTHORIZED]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Already authorized (403)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code PreAuthorize transaction - [AUTH_TRX][ALREADY_AUTHORIZED][STEP_5] [IO] PreAuthorize transaction [QR-CODE] - Response status is 403\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code PreAuthorize transaction - [AUTH_TRX][[ALREADY_AUTHORIZED]][STEP_5] [IO] PreAuthorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    pm.expect(responseJson.code).to.eql('PAYMENT_ALREADY_AUTHORIZED');\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Already authorized (403)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][ALREADY_AUTHORIZED][STEP_5] [IO] Authorize transaction [QR-CODE] - Response status is 403\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][[ALREADY_AUTHORIZED]][STEP_5] [IO] Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    pm.expect(responseJson.code).to.eql('PAYMENT_ALREADY_AUTHORIZED');\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate Token IO - Authorize transaction not found (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][TRX_NOT_FOUND][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Authorize transaction not found (404)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [AUTH_TRX][TRX_NOT_FOUND][STEP_2] [IO] Authorize transaction [QR-CODE] - Response status is 404\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Authorize transaction - [PRE_AUTH_TRX][OTHER_USER_RELATED][STEP_4][IO] Pre-Authorize transaction [QR-CODE] - Response contains info about a rejected transactions\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const trxCodeFake = pm.collectionVariables.get(\"trxCode_fake\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with trxCode [${trxCodeFake}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode_fake}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "QRCode Confirm Transaction",
              "item": [
                {
                  "name": "Transaction status not AUTHORIZED - 400",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction  - Confirm transaction: status not authorized (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_STATUS_NOT_AUTHORIZED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Confirm transaction: status not authorized (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_STATUS_NOT_AUTHORIZED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Confirm Transaction Copy",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response transaction not authorized\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_ALLOWED_FOR_TRX_STATUS\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot operate on transaction with transactionId [${transactionId}] in status CREATED`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const wait = pm.collectionVariables.get(\"wait\");\r",
                              "setTimeout(() => {}, wait);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                          "host": ["{{paymentServerUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "{{transactionId}}",
                            "confirm"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Another merchant related transaction - 403",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Confirm transaction: another user related (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Confirm transaction: another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Confirm transaction: another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Confirm transaction: another user related (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][ANOTHER_USER_RELATED][STEP_4] [IO] Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"1\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Confirm Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response transaction not authorized\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const merchantId = pm.collectionVariables.get(\"merchantId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_ALLOWED_MISMATCHED_MERCHANT\");\r",
                              "    pm.expect(responseJson.message).to.eql(`The merchant with id [${merchantId}] associated to the transaction is not equal to the merchant with id [merchantIdFake]`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const wait = pm.collectionVariables.get(\"wait\");\r",
                              "setTimeout(() => {}, wait);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "merchantIdFake",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                          "host": ["{{paymentServerUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "{{transactionId}}",
                            "confirm"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Confirm Transaction - Confirm transaction: transaction not found (404)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response transaction not authorized\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId_fake = pm.collectionVariables.get(\"transactionId_fake\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_OR_EXPIRED\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with transactionId [${transactionId_fake}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const wait = pm.collectionVariables.get(\"wait\");\r",
                              "setTimeout(() => {}, wait);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId_fake}}/confirm",
                          "host": ["{{paymentServerUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "{{transactionId_fake}}",
                            "confirm"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction alredy processed - 404",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - Confirm transaction: transaction already processed (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_2] [ACQUIRER] Create transaction [QR-CODE] - Response status is 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO - Confirm transaction: transaction already processed (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_1] Retrieve Token - Response status is 200', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction - Confirm transaction: transaction already processed (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_3] [IO] Pre-Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction - Confirm transaction: transaction already processed (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_4] [IO] Authorize transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Confirm Transaction - Confirm transaction 1: transaction already processed (200)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: QR code Confirm transaction - [CONFIRM_TRX][TRX_ALREADY_PROCESSED][STEP_5] [ACQUIRER] Confirm transaction [QR-CODE] - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const wait = pm.collectionVariables.get(\"wait\");\r",
                              "setTimeout(() => {}, wait);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                          "host": ["{{paymentServerUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "{{transactionId}}",
                            "confirm"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Confirm Transaction - Confirm transaction 2: transaction already processed (404)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response transaction not authorized\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_OR_EXPIRED\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with transactionId [${transactionId}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const wait = pm.collectionVariables.get(\"wait\");\r",
                              "setTimeout(() => {}, wait);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                          "host": ["{{paymentServerUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "{{transactionId}}",
                            "confirm"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Budget exhausted",
              "item": [
                {
                  "name": "Create Transaction",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"500\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Budget exhausted - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - [IO] Pre-Authorize transaction [QR-CODE] - Verify response is: Budget exhausted for user and initiative\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId_exhausted = pm.collectionVariables.get(\"initiativeId_exhausted\");\r",
                              "\r",
                              "    pm.expect(jsonResponse.message).to.eql(`Budget exhausted for the current user and initiative [${initiativeId_exhausted}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Merchant Transactions",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - Get merchant transactions list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - Budget exhausted - Get merchant transactions list - checking effectiveAmount and rewardAmount values\", function () {\r",
                              "     let jsonResponse = pm.response.json()\r",
                              "     const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                              "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                              "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(0);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "portal",
                            "initiatives",
                            "{{initiativeId_exhausted}}",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cancel transaction by merchant",
              "item": [
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Cancel transaction by merchant - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Cancel transaction by merchant",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - [IO] Cancel transaction\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Transaction not found - Cancel transaction by citizen - [IO] Cancel transaction - Response contains info about a transaction not found\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const transactionId_fake = pm.collectionVariables.get(\"transactionId_fake\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_FOUND_OR_EXPIRED\")\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot find transaction with transactionId [${transactionId_fake}]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "",
                            "value": "",
                            "type": "text",
                            "disabled": true
                          },
                          {
                            "key": "",
                            "value": "",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            ":transactionId"
                          ],
                          "variable": [
                            {
                              "key": "transactionId",
                              "value": "{{transactionId_fake}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Another merchant try to cancel transaction - 403",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                              "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction -  Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Pre-Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Another user try to cancel transaction - Cancel transaction by citizen - [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let initiativeBudgetCents= jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents+jsonResponse.rewardAmountCents);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "payment",
                            "qr-code",
                            ":trxCode",
                            "relate-user"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - Cancel transaction by merchant - Another merchant try to cancel transaction - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"test\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Cancel transaction by merchant",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [IO] Cancel transaction\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Cancel transaction by merchant - Another merchant try to cancel transaction - [IO] Cancel transaction - Response contains a merchant mismatched\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    const merchantId = pm.collectionVariables.get(\"merchantId\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_NOT_ALLOWED_MISMATCHED_MERCHANT\")\r",
                              "    pm.expect(responseJson.message).to.eql(`The merchant with id [${merchantId}] associated to the transaction is not equal to the merchant with id [test]`);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "",
                            "value": "",
                            "type": "text",
                            "disabled": true
                          },
                          {
                            "key": "",
                            "value": "",
                            "type": "text",
                            "disabled": true
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            ":transactionId"
                          ],
                          "variable": [
                            {
                              "key": "transactionId",
                              "value": "{{transactionId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Delete Initiative initiativeId",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy Case - Cancel transaction by merchant - Another merchant try to cancel transaction - Delete Initiative initativeId - Status test 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                          "host": [
                            "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                          ],
                          "path": ["idpay", "initiative", "{{initiativeId}}"]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Initiative not started",
              "item": [
                {
                  "name": "Initiative creation",
                  "item": [
                    {
                      "name": "ENTE - Initiative creation",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP1-Insert Initiative (Service Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                  "const serviceName = 'Test funzionali App IO QRCODE ' + now;\r",
                                  "pm.collectionVariables.set('serviceName', serviceName);\r",
                                  "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "\r",
                                  "pm.collectionVariables.set('channel_type', 'web');\r",
                                  "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "var jsonData = JSON.parse(responseBody);\r",
                                  "pm.collectionVariables.set('initiativeId_not_started', jsonData.initiativeId);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                                  "    pm.response.to.have.status(201);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/info",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["info"]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP2-Update Initiative (general Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "//Format: YYYY-MM-DD\r",
                                  "let today = String(moment().format('YYYY-MM-DD'));\r",
                                  "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "\r",
                                  "/*\r",
                                  "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                                  "pm.collectionVariables.set('...', _.random(0, 180));\r",
                                  "*/\r",
                                  "//_.random(1.0, 100000.0, true)\r",
                                  "pm.collectionVariables.set('budget', 1200);\r",
                                  "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                                  "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                                  "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                                  "pm.collectionVariables.set('rankingEnabled', false);\r",
                                  "pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
                                  "pm.collectionVariables.set('rankingStartDate', today);\r",
                                  "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                                  "pm.collectionVariables.set('startDate', todayP1);\r",
                                  "pm.collectionVariables.set('endDate', todayP3);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "general"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId_not_started}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP3-Update Initiative (criteria)",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId_not_started}}/beneficiary",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [
                                "{{initiativeId_not_started}}",
                                "beneficiary"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP4-Update Initiative Trx-Reward rules",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "const d = new Date();\r",
                                  "dateString = d.toISOString()\r",
                                  "let endTime = dateString.split('T');\r",
                                  "endTime = endTime[1].split('Z');\r",
                                  "\r",
                                  "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                                  "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                                  "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                                  "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                                  "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                                  "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                                  "} else {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                                  "}\r",
                                  "\r",
                                  "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                                  "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                                  "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                                  "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                                  "pm.collectionVariables.set('trxCountFrom', 3);\r",
                                  "pm.collectionVariables.set('trxCountTo', 11);\r",
                                  "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                                  "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"threshold\": {\n    \"from\": {{trxThresholdFrom}},\n    \"fromIncluded\": true,\n    \"to\": {{trxThresholdTo}},\n    \"toIncluded\": true\n    }\n  }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "reward"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId_not_started}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP5-Update Initiative Refund Rule",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                                  "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "*/\r",
                                  "\r",
                                  "/*\r",
                                  "let refundType = \"timeParameter\";\r",
                                  "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                                  "\r",
                                  "const refundTypeSelected = \"timeParameter\";\r",
                                  "let body = {};\r",
                                  "if (refundTypeSelected == \"timeParameter\") {\r",
                                  "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "    body = {\r",
                                  "        timeParameter: {\r",
                                  "            timeType: timeType[timeTypeRandomIndex]\r",
                                  "        }\r",
                                  "    };\r",
                                  "} else {\r",
                                  "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                                  "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                                  "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                                  "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                                  "            }\r",
                                  "        };\r",
                                  "    } else {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                                  "                refundThreshold: 10\r",
                                  "            }\r",
                                  "        };\r",
                                  "    }\r",
                                  "}\r",
                                  "*/\r",
                                  "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                                  "const body = {\r",
                                  "    timeParameter: {\r",
                                  "        timeType: timeType[timeTypeRandomIndex]\r",
                                  "    }\r",
                                  "};\r",
                                  "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "refund"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId_not_started}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "PAGOPA - Initiative update status APPROVED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update initiative into APPROVED status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalTokenPagopa}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId_not_started}}/approved",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [
                                "{{initiativeId_not_started}}",
                                "approved"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "ENTE - Initiative PUBLISHED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Initiative PUBLISHED",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});\r",
                                  "\r",
                                  "waitDroolsRuleSync(setTimeout);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*let body;\r",
                                  "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                                  "if(baseUrlInitiative.includes('localhost')){\r",
                                  "    body = {\r",
                                  "        mode: 'raw',\r",
                                  "        raw: JSON.stringify({\r",
                                  "            organizationName: 'Comune di Milano',\r",
                                  "            organizationFiscalCode: '11122233344',\r",
                                  "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                                  "            organizationUserRole: 'admin'\r",
                                  "        })\r",
                                  "    }\r",
                                  "    pm.request.headers.add({\r",
                                  "        key: \"Content-Type\",\r",
                                  "        value: \"application/json\"\r",
                                  "    });\r",
                                  "    pm.variables.set('body', JSON.stringify(body));\r",
                                  "    pm.request.body.update(body);\r",
                                  "}\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disabledSystemHeaders": {}
                          },
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId_not_started}}/published",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [
                                "{{initiativeId_not_started}}",
                                "published"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Upload csv",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Upload csv",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Upload csv - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "formdata",
                              "formdata": [
                                {
                                  "key": "file",
                                  "type": "file",
                                  "src": "./postman/Esercente di test IdPay.csv"
                                }
                              ]
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId_not_started}}/upload",
                              "host": ["{{baseUrlToken}}"],
                              "path": [
                                "merchant",
                                "initiative",
                                "{{initiativeId_not_started}}",
                                "upload"
                              ],
                              "query": [
                                {
                                  "key": "",
                                  "value": null,
                                  "disabled": true
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Get Merchant list on initiative",
                      "item": [
                        {
                          "name": "Get Merchant List",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - Get merchant list - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().content.length == 0) {\r",
                                  "    retryRequest(postman, pm, setTimeout);\r",
                                  "} else {\r",
                                  "    pm.test(\"Payment - Unhappy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                                  "\r",
                                  "        const response = pm.response.json().content[0];\r",
                                  "        pm.expect(response).have.property(\"merchantId\");\r",
                                  "        pm.expect(response).have.property(\"businessName\");\r",
                                  "        pm.expect(response).have.property(\"fiscalCode\");\r",
                                  "        pm.expect(response).have.property(\"merchantStatus\");\r",
                                  "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                                  "\r",
                                  "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                                  "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                                  "        pm.collectionVariables.set(\"merchantFiscalCode\", response.fiscalCode);\r",
                                  "    });\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId_not_started}}/merchants",
                              "host": ["{{baseUrlMerchant}}"],
                              "path": [
                                "initiative",
                                "{{initiativeId_not_started}}",
                                "merchants"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Try to create transaction - 400",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[ACQUIRER] Create Transaction - TokenIO not valid (201)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Initiative not started - Try to create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] Response status is 400\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case: Initiative not started - Try to create transaction - [CREATE_TRX][INITIATIVE_NOT_FOUND][ACQUIRER] Create transaction [QR-CODE] - Response contains info about an invalid date\", function () {\r",
                              "    const responseJson = pm.response.json();\r",
                              "    let startDate = pm.collectionVariables.get(\"startDate\");\r",
                              "    let endDate = pm.collectionVariables.get(\"endDate\");\r",
                              "    pm.expect(responseJson.code).to.eql(\"PAYMENT_INITIATIVE_INVALID_DATE\");\r",
                              "    pm.expect(responseJson.message).to.eql(`Cannot create transaction out of valid period. Initiative startDate: ${startDate} endDate: ${endDate}`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-id",
                            "value": "{{merchantId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_not_started}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Delete Initiative initiativeId",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy Case - Delete Initiative - Status test 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId_not_started}}",
                      "host": [
                        "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                      ],
                      "path": [
                        "idpay",
                        "initiative",
                        "{{initiativeId_not_started}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Delete Initiative initiativeId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payment - Unhappy Case - Delete Initiative - Status test 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                  "host": [
                    "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                  ],
                  "path": ["idpay", "initiative", "{{initiativeId}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Delete Initiative initiativeId_exhausted",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm=instrumentPmMethod(pm);\r",
                  "\r",
                  "pm.test(\"Payment - Unhappy Case - Delete Initiative initativeId_exhausted - Status test 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId_exhausted}}",
              "host": [
                "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
              ],
              "path": ["idpay", "initiative", "{{initiativeId_exhausted}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "BarCode",
      "item": [
        {
          "name": "Happy case",
          "item": [
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO BarCode ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact','https://www.google.it');"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "var jsonData = JSON.parse(responseBody);\r",
                              "// console.log('jsondata', jsonData);\r",
                              "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                              "pm.collectionVariables.set('initiativeId_exhausted', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.random(1.0, 100000.0, true)\r",
                              "pm.collectionVariables.set('budget', 500);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "general"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_exhausted}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - BarCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - BarCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "waitDroolsRuleSync(setTimeout);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_exhausted}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_exhausted}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/Esercente di test IdPay.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId_exhausted}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId_exhausted}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().content.length == 0) {\r",
                              "    retryRequest(postman, pm, setTimeout);\r",
                              "} else {\r",
                              "    pm.test(\"Payment - Happy case - BarCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "        const response = pm.response.json().content[0];\r",
                              "        pm.expect(response).have.property(\"merchantId\");\r",
                              "        pm.expect(response).have.property(\"businessName\");\r",
                              "        pm.expect(response).have.property(\"fiscalCode\");\r",
                              "        pm.expect(response).have.property(\"merchantStatus\");\r",
                              "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "    });\r",
                              "\r",
                              "    pm.collectionVariables.set(\"merchantId\", pm.response.json().content[0].merchantId);\r",
                              "    pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId_exhausted}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId_exhausted}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - BarCode - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Onboarding Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "const jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                          "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                          "});\r",
                          "\r",
                          "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId_exhausted}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "onboarding",
                        "{{initiativeId_exhausted}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Wallet Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "} else {\r",
                          "    waitHpanLookupUpdate(setTimeout)\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId_exhausted}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId_exhausted}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create Transaction 1",
              "item": [
                {
                  "name": "[User] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/bar-code",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "payment", "bar-code"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "retryWhenStatusCode(postman, pm, setTimeout, 403);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["waitPaymentThrottling(setTimeout);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "transactions",
                        "bar-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount, rewardAmount and status values\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                          "    const rewardAmount = pm.collectionVariables.get(\"rewardAmountCents\");\r",
                          "    let trxCode = jsonResponse.content[0].trxCode;\r",
                          "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].status).equals(\"AUTHORIZED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Confirm Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE] - Verify response status is REWARDED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const wait = pm.collectionVariables.get(\"wait\");\r",
                          "setTimeout(() => {}, wait);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                      "host": ["{{paymentServerUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "{{transactionId}}",
                        "confirm"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create Transaction 2",
              "item": [
                {
                  "name": "[User] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/bar-code",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "payment", "bar-code"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "retryWhenStatusCode(postman, pm, setTimeout, 429, 1000);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["waitPaymentThrottling(setTimeout);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "transactions",
                        "bar-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmount, rewardAmount and status values\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    const effectiveAmount = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
                          "    const rewardAmount = pm.collectionVariables.get(\"rewardAmountCents\");\r",
                          "    let trxCode = jsonResponse.content[0].trxCode;\r",
                          "    pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmount}`));\r",
                          "    pm.expect(jsonResponse.content[0].status).equals(\"AUTHORIZED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 5000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Confirm Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE] - Verify response status is REWARDED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const wait = pm.collectionVariables.get(\"wait\");\r",
                          "setTimeout(() => {}, wait);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm",
                      "host": ["{{paymentServerUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "{{transactionId}}",
                        "confirm"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "DeleteTransaction",
              "item": [
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - BarCode - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_4}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_4}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - BarCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId_exhausted}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId_exhausted}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId_exhausted}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId_exhausted}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - BarCode - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_4}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_4}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[User] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/bar-code",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "payment", "bar-code"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "retryWhenStatusCode(postman, pm, setTimeout, 403);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                          "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                          "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["waitPaymentThrottling(setTimeout);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "transactions",
                        "bar-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: Delete transaction [BARCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["waitPaymentThrottling(setTimeout);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalCode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{transactionId}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{transactionId}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Merchant Transactions",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Get merchant transactions list - checking empty list\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.content).to.be.empty;\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/portal/initiatives/{{initiativeId_exhausted}}/transactions",
                      "host": ["{{baseUrlMerchant}}"],
                      "path": [
                        "portal",
                        "initiatives",
                        "{{initiativeId_exhausted}}",
                        "transactions"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy case",
          "item": [
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO BARCODE ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "var jsonData = JSON.parse(responseBody);\r",
                              "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.random(1.0, 100000.0, true)\r",
                              "pm.collectionVariables.set('budget', 1200);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "general"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue',10);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}",
                              "description": "(Required) The initiative ID"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "waitDroolsRuleSync(setTimeout);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/Esercente di test IdPay.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().content.length == 0) {\r",
                              "    retryRequest(postman, pm, setTimeout);\r",
                              "} else {\r",
                              "    pm.test(\"Payment - Unhappy case - BarCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "        const response = pm.response.json().content[0];\r",
                              "        pm.expect(response).have.property(\"merchantId\");\r",
                              "        pm.expect(response).have.property(\"businessName\");\r",
                              "        pm.expect(response).have.property(\"fiscalCode\");\r",
                              "        pm.expect(response).have.property(\"merchantStatus\");\r",
                              "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "\r",
                              "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                              "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                              "        pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                              "    });\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Unhappy case - BarCode - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - BarCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Onboarding Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "const jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                          "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                          "});\r",
                          "\r",
                          "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "onboarding",
                        "{{initiativeId}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Wallet Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "} else {\r",
                          "    waitHpanLookupUpdate(setTimeout)\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "wallet", "{{initiativeId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "BarCode Create transaction",
              "item": [
                {
                  "name": "User budget exhausted - 404",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Create transaction - User budget exhausted - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Create transaction - User budget exhausted - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "pm.test(\"Payment - BarCode - Create transaction - User budget exhausted - [USER] Create transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_BUDGET_EXHAUSTED\");\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Initiative not found - 404",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Create transaction - Initiative not found - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Create transaction - Initiative not found - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Create transaction - Initiative not found - [USER] Create transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId_fake = pm.collectionVariables.get(\"initiativeId_fake\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_INITIATIVE_NOT_FOUND\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Cannot find initiative with id [${initiativeId_fake}]`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_fake}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "User not Onboarded - 400",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Create transaction - User not onboarded - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_3}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Create transaction - User not onboarded - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Create transaction - User not onboarded - [USER] Create transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId_exhausted = pm.collectionVariables.get(\"initiativeId_exhausted\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_USER_NOT_ONBOARDED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`The current user is not onboarded on initiative [${initiativeId_exhausted}]`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "UNSUBSCRIBED user try to create - 400",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - BarCode - Create transaction - UNSUBSCRIBED user try to create - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_4}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_4}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Unsubscribe - Ok",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Create transaction - UNSUBSCRIBED user try to create - Unsubscribe - Response status is 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId_exhausted}}/unsubscribe",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId_exhausted}}",
                            "unsubscribe"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Create transaction - UNSUBSCRIBED user try to create - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "pm.test(\"Payment - BarCode - Create transaction - UNSUBSCRIBED user try to create - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId_exhausted = pm.collectionVariables.get(\"initiativeId_exhausted\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_USER_UNSUBSCRIBED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`The user has unsubscribed from initiative [${initiativeId_exhausted}]`);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_exhausted}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "BarCode Authorize Transaction",
              "item": [
                {
                  "name": "Status REJECTED - 400",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_GENERIC_REJECTED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Transaction with transactionId [${transactionId}] is rejected`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"50000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction Rejected",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Status REJECTED - [IO] Authorize transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_NOT_ALLOWED_FOR_TRX_STATUS\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Cannot operate on transaction with transactionId [${transactionId}] in status REJECTED`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Already authorized  - 403",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                              "    let initiativeBudgetCents = jsonResponse.counters.initiativeBudgetCents;\r",
                              "    let totalRewardCents = jsonResponse.counters.totalRewardCents;\r",
                              "    pm.expect(jsonResponse.residualBudgetCents).to.eql(initiativeBudgetCents-totalRewardCents);\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
                              "pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardAmountCents);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction Already Authorized",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Already authorized - [IO] Authorize transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_ALREADY_AUTHORIZED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Transaction with transactionId [${transactionId}] is already authorized`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Amount 0  - 403",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(400);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Authorize transaction - Amount 0 - [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_AMOUNT_NOT_VALID\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Cannot authorize transaction with invalid amount [0]`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"0\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Transaction not found - 404",
                  "item": [
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Authorize transaction - Transaction not found - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Transaction not found - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(404);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Transaction not found - [IO] Authorize transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const trxCode_fake = pm.collectionVariables.get(\"trxCode_fake\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_NOT_FOUND_OR_EXPIRED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Cannot find transaction with trxCode [${trxCode_fake}]`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode_fake}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Try to authorize on SUSPENDED user  - 400",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Suspend User Discount",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - Suspend user', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Fiscal-Code",
                            "value": "{{CF_FAKE_1}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/suspend",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "initiative",
                            "{{initiativeId}}",
                            "beneficiary",
                            "suspend"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on SUSPENDED user - [IO] Authorize transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_USER_SUSPENDED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`The user has been suspended for initiative [${initiativeId}]`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Try to authorize on UNSUBSCRIBED user - 400",
                  "item": [
                    {
                      "name": "Onboarding",
                      "item": [
                        {
                          "name": "Generate Token IO",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{genericSubscriptionKey}}",
                                "type": "default"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
                              "host": ["{{baseUrl}}"],
                              "path": ["rtd", "mock-io", "login"],
                              "query": [
                                {
                                  "key": "fiscalCode",
                                  "value": "{{CF_FAKE_2}}"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Accept T&C",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{apimSubscriptionKey}}",
                                "type": "text"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "text"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", ""]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Prerequisites Check",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                                  "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Ocp-Apim-Subscription-Key",
                                "value": "{{apimSubscriptionKey}}",
                                "type": "text"
                              },
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "text"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", "initiative"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "PDND + Autocertification",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                                  "    pm.response.to.have.status(202);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/consent",
                              "host": ["{{baseUrl}}"],
                              "path": ["idpay", "onboarding", "consent"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Get Onboarding Status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().status != \"ONBOARDING_OK\") {\r",
                                  "    retryRequest(postman, pm, setTimeout, 1000);\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                              "host": ["{{baseUrl}}"],
                              "path": [
                                "idpay",
                                "onboarding",
                                "{{initiativeId}}",
                                "status"
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Get Wallet Status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                                  "    retryRequest(postman, pm, setTimeout, 1000);\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{tokenIO}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                              "host": ["{{baseUrl}}"],
                              "path": [
                                "idpay",
                                "wallet",
                                "{{initiativeId}}",
                                "status"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    let trxCode = jsonResponse.trxCode;\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "});\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Unsubscribe - Ok",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/unsubscribe",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "unsubscribe"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Merchant Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["merchant", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[IO] Authorize Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - [IO] Authorize transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - BarCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_USER_UNSUBSCRIBED\");\r",
                              "    pm.expect(jsonResponse.message).equals(`The user has unsubscribed from initiative [${initiativeId}]`);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{merchantPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/bar-code/:trxCode/authorize",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "merchant",
                            "portal",
                            "transactions",
                            "bar-code",
                            ":trxCode",
                            "authorize"
                          ],
                          "variable": [
                            {
                              "key": "trxCode",
                              "value": "{{trxCode}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Delete Initiative initiativeId",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy Case - Delete Initiative - Status test 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                      "host": [
                        "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                      ],
                      "path": ["idpay", "initiative", "{{initiativeId}}"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Initiative not started",
              "item": [
                {
                  "name": "Initiative creation",
                  "item": [
                    {
                      "name": "ENTE - Initiative creation",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP1-Insert Initiative (Service Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                  "const serviceName = 'Test funzionali App IO BARCODE ' + now;\r",
                                  "pm.collectionVariables.set('serviceName', serviceName);\r",
                                  "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "\r",
                                  "pm.collectionVariables.set('channel_type', 'web');\r",
                                  "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "var jsonData = JSON.parse(responseBody);\r",
                                  "// console.log('jsondata', jsonData);\r",
                                  "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                                  "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                                  "    pm.response.to.have.status(201);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP1 - Verify response body\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/info",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["info"]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP2-Update Initiative (general Info)",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "let moment = require('moment');\r",
                                  "//Format: YYYY-MM-DD\r",
                                  "let today = String(moment().format('YYYY-MM-DD'));\r",
                                  "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                                  "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                                  "\r",
                                  "\r",
                                  "/*\r",
                                  "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                                  "pm.collectionVariables.set('...', _.random(0, 180));\r",
                                  "*/\r",
                                  "//_.random(1.0, 100000.0, true)\r",
                                  "pm.collectionVariables.set('budget', 1200);\r",
                                  "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                                  "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                                  "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                                  "pm.collectionVariables.set('rankingEnabled', false);\r",
                                  "pm.collectionVariables.set('beneficiaryBudget', 400);//default max 1000\r",
                                  "pm.collectionVariables.set('rankingStartDate', today);\r",
                                  "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                                  "pm.collectionVariables.set('startDate', todayP1);\r",
                                  "pm.collectionVariables.set('endDate', todayP3);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "general"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            },
                            "description": "Save initiative and first subset of data 'general info'"
                          },
                          "response": []
                        },
                        {
                          "name": "STEP3-Update Initiative (criteria)",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "beneficiary"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP4-Update Initiative Trx-Reward rules",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "const d = new Date();\r",
                                  "dateString = d.toISOString()\r",
                                  "let endTime = dateString.split('T');\r",
                                  "endTime = endTime[1].split('Z');\r",
                                  "\r",
                                  "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                                  "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                                  "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                                  "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                                  "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                                  "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                                  "} else {\r",
                                  "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                                  "}\r",
                                  "\r",
                                  "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                                  "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                                  "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                                  "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                                  "pm.collectionVariables.set('trxCountFrom', 3);\r",
                                  "pm.collectionVariables.set('trxCountTo', 11);\r",
                                  "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                                  "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"threshold\": {\n    \"from\": {{trxThresholdFrom}},\n    \"fromIncluded\": true,\n    \"to\": {{trxThresholdTo}},\n    \"toIncluded\": true\n    }\n  }\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "reward"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "STEP5-Update Initiative Refund Rule",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                                  "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "\r",
                                  "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                                  "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                  "*/\r",
                                  "\r",
                                  "/*\r",
                                  "let refundType = \"timeParameter\";\r",
                                  "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                                  "\r",
                                  "const refundTypeSelected = \"timeParameter\";\r",
                                  "let body = {};\r",
                                  "if (refundTypeSelected == \"timeParameter\") {\r",
                                  "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                                  "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                                  "    body = {\r",
                                  "        timeParameter: {\r",
                                  "            timeType: timeType[timeTypeRandomIndex]\r",
                                  "        }\r",
                                  "    };\r",
                                  "} else {\r",
                                  "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                                  "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                                  "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                                  "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                                  "            }\r",
                                  "        };\r",
                                  "    } else {\r",
                                  "        body = {\r",
                                  "            accumulatedAmount: {\r",
                                  "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                                  "                refundThreshold: 10\r",
                                  "            }\r",
                                  "        };\r",
                                  "    }\r",
                                  "}\r",
                                  "*/\r",
                                  "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                                  "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                                  "const body = {\r",
                                  "    timeParameter: {\r",
                                  "        timeType: timeType[timeTypeRandomIndex]\r",
                                  "    }\r",
                                  "};\r",
                                  "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": [":initiativeId", "refund"],
                              "variable": [
                                {
                                  "key": "initiativeId",
                                  "value": "{{initiativeId}}",
                                  "description": "(Required) The initiative ID"
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "PAGOPA - Initiative update status APPROVED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - BarCode - Initiative not started - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Update initiative into APPROVED status",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalTokenPagopa}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "approved"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "ENTE - Initiative PUBLISHED",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - BarCode - Initiative not started - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Initiative PUBLISHED",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                                  "    pm.response.to.have.status(204);\r",
                                  "});\r",
                                  "\r",
                                  "waitDroolsRuleSync(setTimeout);"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [
                                  "/*let body;\r",
                                  "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                                  "if(baseUrlInitiative.includes('localhost')){\r",
                                  "    body = {\r",
                                  "        mode: 'raw',\r",
                                  "        raw: JSON.stringify({\r",
                                  "            organizationName: 'Comune di Milano',\r",
                                  "            organizationFiscalCode: '11122233344',\r",
                                  "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                                  "            organizationUserRole: 'admin'\r",
                                  "        })\r",
                                  "    }\r",
                                  "    pm.request.headers.add({\r",
                                  "        key: \"Content-Type\",\r",
                                  "        value: \"application/json\"\r",
                                  "    });\r",
                                  "    pm.variables.set('body', JSON.stringify(body));\r",
                                  "    pm.request.body.update(body);\r",
                                  "}\r",
                                  "*/"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disabledSystemHeaders": {}
                          },
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                              "host": ["{{baseUrlInitiative}}"],
                              "path": ["{{initiativeId}}", "published"]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Upload csv",
                      "item": [
                        {
                          "name": "Generate Portal Token",
                          "event": [
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "let textResponse = pm.response.text()\r",
                                  "\r",
                                  "pm.test('Payment - Unhappy case - BarCode - Initiative not started - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                                  "    //verify response HTTP status \r",
                                  "    pm.response.to.have.status(200);\r",
                                  "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                                  "});\r",
                                  ""
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "noauth"
                            },
                            "method": "POST",
                            "header": [
                              {
                                "key": "Ocp-Apim-Trace",
                                "value": "true",
                                "type": "default"
                              }
                            ],
                            "body": {
                              "mode": "raw",
                              "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/welfare/token/test",
                              "host": ["{{baseUrlToken}}"],
                              "path": ["welfare", "token", "test"]
                            }
                          },
                          "response": []
                        },
                        {
                          "name": "Upload csv",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Upload csv - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                                  "    let jsonResponse = pm.response.json();\r",
                                  "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                                  "});"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "PUT",
                            "header": [],
                            "body": {
                              "mode": "formdata",
                              "formdata": [
                                {
                                  "key": "file",
                                  "type": "file",
                                  "src": "./postman/Esercente di test IdPay.csv"
                                }
                              ]
                            },
                            "url": {
                              "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                              "host": ["{{baseUrlToken}}"],
                              "path": [
                                "merchant",
                                "initiative",
                                "{{initiativeId}}",
                                "upload"
                              ],
                              "query": [
                                {
                                  "key": "",
                                  "value": null,
                                  "disabled": true
                                }
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    },
                    {
                      "name": "Get Merchant list on initiative",
                      "item": [
                        {
                          "name": "Get Merchant List",
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  "pm=instrumentPmMethod(pm);\r",
                                  "\r",
                                  "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Get merchant list - Response status is 200\", function () {\r",
                                  "    pm.response.to.have.status(200);\r",
                                  "});\r",
                                  "\r",
                                  "if(pm.response.json().content.length == 0) {\r",
                                  "    retryRequest(postman, pm, setTimeout);\r",
                                  "} else {\r",
                                  "    pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                                  "\r",
                                  "        const response = pm.response.json().content[0];\r",
                                  "        pm.expect(response).have.property(\"merchantId\");\r",
                                  "        pm.expect(response).have.property(\"businessName\");\r",
                                  "        pm.expect(response).have.property(\"fiscalCode\");\r",
                                  "        pm.expect(response).have.property(\"merchantStatus\");\r",
                                  "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                                  "\r",
                                  "        //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                                  "        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                                  "    });\r",
                                  "}"
                                ],
                                "type": "text/javascript"
                              }
                            },
                            {
                              "listen": "prerequest",
                              "script": {
                                "exec": [""],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "request": {
                            "auth": {
                              "type": "bearer",
                              "bearer": [
                                {
                                  "key": "token",
                                  "value": "{{identityPortalToken}}",
                                  "type": "string"
                                }
                              ]
                            },
                            "method": "GET",
                            "header": [],
                            "url": {
                              "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                              "host": ["{{baseUrlMerchant}}"],
                              "path": [
                                "initiative",
                                "{{initiativeId}}",
                                "merchants"
                              ]
                            }
                          },
                          "response": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "Try to create transaction - 400",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - BarCode - Initiative not started - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "{{Ocp-Apim-Trace}}",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_1}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "[User] Create Transaction",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - [USER] Create transaction [BARCODE]\", function () {\r",
                              "    pm.response.to.have.status(403);\r",
                              "});\r",
                              "pm.test(\"Payment - Unhappy case - BarCode - Initiative not started - [USER] Create transaction [BARCODE] - Verify error message\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    const startDate = pm.collectionVariables.get(\"startDate\");\r",
                              "    const endDate = pm.collectionVariables.get(\"endDate\");\r",
                              "    pm.expect(jsonResponse.code).equals(\"PAYMENT_INITIATIVE_INVALID_DATE\");\r",
                              "    pm.expect(jsonResponse.message).equals(`Cannot create transaction out of valid period. Initiative startDate: ${startDate} endDate: ${endDate}`);\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                              "\r",
                              "pm.collectionVariables.set(\"trxDate\", today);\r",
                              "\r",
                              "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/payment/bar-code",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "payment", "bar-code"]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Delete Initiative initiativeId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payment - Unhappy Case - Delete Initiative - Status test 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
                  "host": [
                    "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                  ],
                  "path": ["idpay", "initiative", "{{initiativeId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Delete Initiative initiativeId_exhausted",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payment - Unhappy Case - Delete Initiative initativeId_exhausted - Status test 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId_exhausted}}",
                  "host": [
                    "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                  ],
                  "path": ["idpay", "initiative", "{{initiativeId_exhausted}}"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "IDPAYCODE",
      "item": [
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "var jsonData = JSON.parse(responseBody);\r",
                              "// console.log('jsondata', jsonData);\r",
                              "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                              "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.random(1.0, 100000.0, true)\r",
                              "pm.collectionVariables.set('budget', 500);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "general"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId",
                              "value": "{{initiativeId}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              "\r",
                              "waitDroolsRuleSync(setTimeout);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/Esercente di test IdPay.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().content.length == 0) {\r",
                              "    retryRequest(postman, pm, setTimeout);\r",
                              "} else {\r",
                              "    pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "        const response = pm.response.json().content[0];\r",
                              "        pm.expect(response).have.property(\"merchantId\");\r",
                              "        pm.expect(response).have.property(\"businessName\");\r",
                              "        pm.expect(response).have.property(\"fiscalCode\");\r",
                              "        pm.expect(response).have.property(\"merchantStatus\");\r",
                              "        pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "    });\r",
                              "\r",
                              "    pm.collectionVariables.set(\"merchantId\", pm.response.json().content[0].merchantId);\r",
                              "    pm.collectionVariables.set(\"merchantFiscalCode\", pm.response.json().content[0].fiscalCode);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdapyCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdapyCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdapyCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Onboarding Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "const jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                          "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                          "});\r",
                          "\r",
                          "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "onboarding",
                        "{{initiativeId}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Wallet Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                          "    retryRequest(postman, pm, setTimeout, 1000);\r",
                          "} else {\r",
                          "    waitHpanLookupUpdate(setTimeout)\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "wallet", "{{initiativeId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Enroll idpayCode",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Enroll code - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_FAKE_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case:  Generate Code [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: Generate Code [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"idpayCode\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/code/generate",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "wallet", "code", "generate"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Enroll Code from Wallet",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case:  Enroll Code [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/code/instruments",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "code",
                        "instruments"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Payment Instrument List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    \r",
                          "    pm.expect(jsonResponse.instrumentList).to.have.lengthOf(2);\r",
                          "\r",
                          "    const response = pm.response.json().instrumentList[1];\r",
                          "    pm.expect(response).to.have.property(\"instrumentId\");\r",
                          "    pm.expect(response).to.have.property(\"status\");\r",
                          "    pm.expect(response).to.have.property(\"channel\");\r",
                          "    pm.expect(response).to.have.property(\"instrumentType\");\r",
                          "\r",
                          "    pm.expect(response.instrumentType).equals(\"IDPAYCODE\");\r",
                          "\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "Accept-Language",
                        "value": "it_IT",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/instruments",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "instruments"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create transaction",
              "item": [
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Relate User with transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{transactionId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{transactionId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Preview",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Preview transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"rewardCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"residualBudgetCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"secondFactor\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{transactionId}}/preview",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "idpay-code",
                        "{{transactionId}}",
                        "preview"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).eq(\"IDENTIFIED\");\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{transactionId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "{{transactionId}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Delete Trx",
              "item": [
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Relate User with transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Preview",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Preview transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"rewardCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"residualBudgetCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"secondFactor\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{trxId}}/preview",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "idpay-code",
                        "{{trxId}}",
                        "preview"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: Delete transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalCode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trxId}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trxId}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response is: Cannot find transaction with transactionId\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const trxId = pm.collectionVariables.get(\"trxId\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`Cannot find transaction with transactionId [${trxId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trxId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trxId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "Transaction Already Assigned or not found",
              "item": [
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - IdpayCode - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_4}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_4}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "const jsonResponse = pm.response.json();\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                              "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                              "});\r",
                              "\r",
                              "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "} else {\r",
                              "    waitHpanLookupUpdate(setTimeout)\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Create transaction",
                  "item": [
                    {
                      "name": "Create TRX",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - IdpayCode - Unhappy case: Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - IdpayCode - Unhappy case: Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                              "\r",
                              "    pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "value",
                              "value": "{{milSubscriptionKey}}",
                              "type": "string"
                            },
                            {
                              "key": "key",
                              "value": "Ocp-Apim-Subscription-Key",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "x-merchant-fiscalcode",
                            "value": "{{merchantFiscalCode}}",
                            "type": "text"
                          },
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/mil/payment/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "mil", "payment", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Relate user",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Relate User with transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "value",
                              "value": "{{minintSubscriptionKey}}",
                              "type": "string"
                            },
                            {
                              "key": "key",
                              "value": "Ocp-Apim-Subscription-Key",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Fiscal-Code",
                            "value": "{{CF_FAKE_1}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/minint/payment/{{transactionId}}/user",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "minint",
                            "payment",
                            "{{transactionId}}",
                            "user"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Preview",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Preview transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse).have.property(\"rewardCents\");\r",
                              "    pm.expect(jsonResponse).have.property(\"residualBudgetCents\");\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                              "    pm.expect(jsonResponse).have.property(\"secondFactor\");\r",
                              "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "value",
                              "value": "{{milSubscriptionKey}}",
                              "type": "string"
                            },
                            {
                              "key": "key",
                              "value": "Ocp-Apim-Subscription-Key",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-fiscalcode",
                            "value": "{{merchantFiscalCode}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{transactionId}}/preview",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "mil",
                            "payment",
                            "idpay-code",
                            "{{transactionId}}",
                            "preview"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "GetStatus trx",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Unhappy case: Status transaction [IDAPYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - IdpayCode - Status transaction - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eq(\"IDENTIFIED\");\r",
                              "})"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "value",
                              "value": "{{milSubscriptionKey}}",
                              "type": "string"
                            },
                            {
                              "key": "key",
                              "value": "Ocp-Apim-Subscription-Key",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "x-acquirer-id",
                            "value": "{{acquirerId}}",
                            "type": "text"
                          },
                          {
                            "key": "x-merchant-fiscalcode",
                            "value": "{{merchantFiscalCode}}",
                            "type": "text"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/mil/payment/{{transactionId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "mil",
                            "payment",
                            "{{transactionId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response is: Transaction with transactionId is already assigned to another user\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const transactionId = pm.collectionVariables.get(\"transactionId\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`Transaction with transactionId [${transactionId}] is already assigned to another user`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_4}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{transactionId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{transactionId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user Notfound",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response is: Cannot find transaction with transactionId\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`Cannot find transaction with transactionId [12345]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_4}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/12345/user",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "minint", "payment", "12345", "user"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Try to authorize on SUSPENDED user  - 400",
              "item": [
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - IdpayCode - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_2}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_2}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "const jsonResponse = pm.response.json();\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                              "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                              "});\r",
                              "\r",
                              "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "} else {\r",
                              "    waitHpanLookupUpdate(setTimeout)\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Generate Portal Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - IdpayCode - Authorize transaction - Try to authorize on SUSPENDED user - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/welfare/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["welfare", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Suspend User Discount",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test('Payment - IdpayCode - Authorize transaction - Try to authorize on SUSPENDED user - Suspend user', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_2}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/suspend",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "initiative",
                        "{{initiativeId}}",
                        "beneficiary",
                        "suspend"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response is: The user has been suspended for initiative\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`The user has been suspended for initiative [${initiativeId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_2}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy Case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).eq(\"CREATED\");\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trxId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trxId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Try to authorize on UNSUBSCRIBED user - 400",
              "item": [
                {
                  "name": "Onboarding",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Unhappy case - IdpayCode - Onboarding - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_3}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_3}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Accept T&C",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Accept T&C - return status 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", ""]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Prerequisites Check",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                              "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "initiative"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "PDND + Autocertification",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Unhappy case - IdapyCode - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                              "    pm.response.to.have.status(202);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/consent",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "onboarding", "consent"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Onboarding Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "const jsonResponse = pm.response.json();\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - not KO\", function () {\r",
                              "    pm.expect(jsonResponse.status).not.eq('ONBOARDING_KO');\r",
                              "});\r",
                              "\r",
                              "if(jsonResponse.status != \"ONBOARDING_OK\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "onboarding",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Wallet Status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Onboarding - Get Onboarding Status - return status 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "if(pm.response.json().status != \"REFUNDABLE\") {\r",
                              "    retryRequest(postman, pm, setTimeout, 1000);\r",
                              "} else {\r",
                              "    waitHpanLookupUpdate(setTimeout)\r",
                              "}"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "status"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Unsubscribe - Ok",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Authorize transaction - Try to authorize on UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/unsubscribe",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response is: The user has unsubscribed from initiative\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`The user has unsubscribed from initiative [${initiativeId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_3}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy Case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).eq(\"CREATED\");\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trxId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trxId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "User is not onboarded",
              "item": [
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response is: The current user is not onboarded on initiative\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`The current user is not onboarded on initiative [${initiativeId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{user_fake}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "PinBlock invalid",
              "item": [
                {
                  "name": "Enroll idpayCode Copy",
                  "item": [
                    {
                      "name": "Generate Token IO",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test('Payment - Happy case - IdpayCode - Enroll code - Generate Token IO', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{genericSubscriptionKey}}",
                            "type": "default"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE_4}}",
                          "host": ["{{baseUrl}}"],
                          "path": ["rtd", "mock-io", "login"],
                          "query": [
                            {
                              "key": "fiscalCode",
                              "value": "{{CF_FAKE_4}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Generate Code",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case:  Generate Code [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "pm.test(\"Payment - Happy case: Generate Code [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).to.have.property(\"idpayCode\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/code/generate",
                          "host": ["{{baseUrl}}"],
                          "path": ["idpay", "wallet", "code", "generate"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Enroll Code from Wallet",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case:  Enroll Code [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/code/instruments",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "code",
                            "instruments"
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Get Payment Instrument List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm=instrumentPmMethod(pm);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE]\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    \r",
                              "    pm.expect(jsonResponse.instrumentList).to.have.lengthOf(2);\r",
                              "\r",
                              "    const response = pm.response.json().instrumentList[1];\r",
                              "    pm.expect(response).to.have.property(\"instrumentId\");\r",
                              "    pm.expect(response).to.have.property(\"status\");\r",
                              "    pm.expect(response).to.have.property(\"channel\");\r",
                              "    pm.expect(response).to.have.property(\"instrumentType\");\r",
                              "\r",
                              "    pm.expect(response.instrumentType).equals(\"IDPAYCODE\");\r",
                              "\r",
                              "});\r",
                              "\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{tokenIO}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key",
                            "value": "{{apimSubscriptionKey}}",
                            "type": "text"
                          },
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "text"
                          },
                          {
                            "key": "Accept-Language",
                            "value": "it_IT",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/instruments",
                          "host": ["{{baseUrl}}"],
                          "path": [
                            "idpay",
                            "wallet",
                            "{{initiativeId}}",
                            "instruments"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - User suspended - Relate User with transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_4}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Preview",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Preview transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"rewardCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"residualBudgetCents\");\r",
                          "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse).have.property(\"secondFactor\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{trxId}}/preview",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "idpay-code",
                        "{{trxId}}",
                        "preview"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Auth",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - Pin Block Invalid - Authorize transaction [IDPAYCODE] - Verify response is: The Pinblock is incorrect\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "\r",
                          "    pm.expect(jsonResponse.code).to.eql(`PAYMENT_INVALID_PINBLOCK`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"pinBlock\": \"{{pinBlock}}\",\r\n    \"encryptedKey\": \"{{encryptedKey}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{trxId}}/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "idpay-code",
                        "{{trxId}}",
                        "authorize"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy Case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).eq(\"IDENTIFIED\");\r",
                          "})"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trxId}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trxId}}", "status"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Merchant not onboarded",
              "item": [
                {
                  "name": "Create TRX",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction - Create transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - IdpayCode - Create transaction -  Create transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"trxId\", pm.response.json().id);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      },
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\": \"{{initiativeId}}\",\r\n    \"amountCents\": 5000,\r\n    \"idTrxAcquirer\":\"{{idTrxAcquirer}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Relate user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Unhappy case - Merchant not onboarded - Relate User with transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).equals(\"IDENTIFIED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{minintSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_FAKE_4}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/minint/payment/{{trxId}}/user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "minint",
                        "payment",
                        "{{trxId}}",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Preview",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: [IO] Pre-Authorize transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(403);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Pre-Authorize transaction -  Preview transaction [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "\r",
                          "    pm.expect(jsonResponse.code).to.eql(\"PAYMENT_MERCHANT_NOT_ONBOARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode_fake}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/idpay-code/{{trxId}}/preview",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "idpay-code",
                        "{{trxId}}",
                        "preview"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Delete Trx not found",
              "item": [
                {
                  "name": "Delete trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Unhappy case: Delete transaction [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Delete transaction - Verify response is: Cannot find transaction with transactionId\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const transactionId = pm.collectionVariables.get(\"trx_Id\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`Cannot find transaction with transactionId [${transactionId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalCode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trx_Id}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "mil", "payment", "{{trx_Id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GetStatus trx",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm=instrumentPmMethod(pm);\r",
                          "\r",
                          "pm.test(\"Happy case: Status transaction [IDAPYCODE]\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - Status transaction - Verify response is: Cannot find transaction with transactionId\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    const transactionId = pm.collectionVariables.get(\"trx_Id\");\r",
                          "\r",
                          "    pm.expect(jsonResponse.message).to.eql(`Cannot find transaction with transactionId [${transactionId}]`);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{milSubscriptionKey}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-acquirer-id",
                        "value": "{{acquirerId}}",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-fiscalcode",
                        "value": "{{merchantFiscalCode}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/mil/payment/{{trx_Id}}/status",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "mil",
                        "payment",
                        "{{trx_Id}}",
                        "status"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Delete Initiative",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm=instrumentPmMethod(pm);\r",
                  "\r",
                  "pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
              "host": [
                "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
              ],
              "path": ["idpay", "initiative", "{{initiativeId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// START COMMON UTILITIES",
          "skipTests=false;",
          "",
          "instrumentPmMethod = (pm) => {",
          "    const pmProxy = {",
          "        get: function(pm, key) {",
          "            if (key == 'test') {",
          "                return (skipTests ? pm.test.skip : pm.test);",
          "            }",
          "            return pm[key];",
          "        }",
          "    };",
          "",
          "    return new Proxy(pm, pmProxy);",
          "}",
          "",
          "retryRequest = (postman, pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {",
          "    if(!postman || !pm || !setTimeout){",
          "        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: postman=\" + postman + \", pm=\" + pm + \", setTimeout=\" + setTimeout)",
          "    }",
          "",
          "    const retryVariableName = \"retry_\" + pm.info.requestId",
          "    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;",
          "    if(attempt < maxAttempts) {",
          "        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");",
          "        pm.variables.set(retryVariableName, attempt)",
          "        postman.setNextRequest(pm.info.requestId);",
          "        return setTimeout(()=>{}, waitingMillis);",
          "    } else {",
          "        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));",
          "    }",
          "}",
          "",
          "retryWhenStatusCode = (postman, pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {",
          "    if(pm.response.code == statusCode){",
          "        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")",
          "        skipTests=true;",
          "        return retryRequest(postman, pm, setTimeout, waitingMillis, maxAttempts)",
          "    }",
          "}",
          "",
          "// Retrying if 429",
          "retryWhenStatusCode(postman, pm, setTimeout, 429);",
          "",
          "// START PAYMENT UTILITIES",
          "",
          "waitPaymentThrottling = (setTimeout) => {",
          "    const paymentThrottlingMillis=1000;",
          "    console.log(\"Waiting payment throttling millis\", paymentThrottlingMillis)",
          "    return setTimeout(()=>{}, paymentThrottlingMillis)",
          "}",
          "",
          "waitDroolsRuleSync = (setTimeout) => {",
          "    const rewardRuleDroolsSyncMillis=pm.collectionVariables.get(\"rewardRuleDroolsSyncMillis_\" + pm.environment.name) ?? pm.collectionVariables.get(\"rewardRuleDroolsSyncMillis_UAT\");",
          "    const beneficiaryRuleDroolsSyncMillis=pm.collectionVariables.get(\"beneficiaryRuleDroolsSyncMillis_\" + pm.environment.name) ?? pm.collectionVariables.get(\"beneficiaryRuleDroolsSyncMillis_UAT\");",
          "    const droolsSyncMillis=Math.max(rewardRuleDroolsSyncMillis, beneficiaryRuleDroolsSyncMillis);",
          "",
          "    console.log(\"Waiting drools rules sync millis\", droolsSyncMillis)",
          "    return setTimeout(()=>{}, droolsSyncMillis)",
          "}",
          "",
          "waitHpanLookupUpdate = (setTimeout) => {",
          "    const hpanLookupWaitingMillis=500;",
          "    console.log(\"Waiting hpanLookup update millis\", hpanLookupWaitingMillis)",
          "    return setTimeout(()=>{}, hpanLookupWaitingMillis)",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "trxCode",
      "value": "kxr7uber"
    },
    {
      "key": "transactionId",
      "value": "980d55b7-317a-482f-85c6-9f21e4d47e13_1702479736122"
    },
    {
      "key": "initiativeId",
      "value": "6579c641dcfe31699a2b56b2",
      "type": "string"
    },
    {
      "key": "trxDate",
      "value": "2023-12-16T16:02:15.697+01:00",
      "type": "string"
    },
    {
      "key": "tokenIO",
      "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJCUlRWTkw2M0UyNlgwMDBVIiwiaWF0IjoxNzAyNDc5NzM2LCJleHAiOjE3MDI0ODMzMzZ9.VatwcclPQLHQtSZbcrcnLBALvdDmffXbRnSF9AbItl8"
    },
    {
      "key": "randomNum",
      "value": 197
    },
    {
      "key": "identityPortalToken",
      "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MDI0Nzk3MTgsImV4cCI6MTcwMjUwODUxOCwiYXVkIjoiaWRwYXkud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiODM4NDM4NjQtZjNjMC00ZGVmLWJhZGItN2YxOTc0NzFiNzJlIiwibmFtZSI6InBpcHBvIiwiZmFtaWx5X25hbWUiOiJxd2VydHkiLCJlbWFpbCI6InBpcHBvQHRlc3QuZW1haWwuaXQiLCJvcmdfaWQiOiIzOTBjZWEzOC1mMmRlLTRiY2ItYTE4MS1kNmVlZjk5ZmU1MjgiLCJvcmdfdmF0IjoiODAxMTcwODI3MjQiLCJvcmdfbmFtZSI6IkVudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoie3tvcmdQYXJ0eVJvbGVfRW50ZX19Iiwib3JnX3JvbGUiOiJhZG1pbiJ9.FUsVWGPaSJQEOufm9rV-xaccV5xGtJWITDTm6nKgvoKfIWqlpZfZ-1VoZpIo5DxodabEw7QHM5sWeArFUhKwqsLSSbWKHwsEjtz0nin5Q6BbvfazQYboMjAauJWEjir45a2K46yXhDYmiFmixRA49_dJyE1rUoppsuZuGzaR0uCG-x3ioWVa0phKa0OwJc19p2FO9MDkX-8htkLdymHYR7vLj9XNDdCZ873ohzuL_trXVc95aX0dJy5_vfVlq1s1IYKxCqc-XFiJgXlNnTnXfFhcasS8n1pNoa5q08R6ZIvvsPo7xxTakqIVuo_uLf2_p2XT7YUXMvBrffGBW1X4ow"
    },
    {
      "key": "identityPortalTokenPagopa",
      "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MDI0Nzk3MDksImV4cCI6MTcwMjUwODUwOSwiYXVkIjoiaWRwYXkud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiNDNlNDI2M2ItNGRkNC00YzBmLTljNjQtMTFjYzFhMjIxY2RkIiwibmFtZSI6ImFkbWluIiwiZmFtaWx5X25hbWUiOiJwYWdvcGEiLCJlbWFpbCI6ImFkbWluX3BhZ29wYV9kZXZAdGVzdC5lbWFpbC5pdCIsIm9yZ19pZCI6IjM5MGNlYTM4LWYyZGUtNGJjYi1hMTgxLWQ2ZWVmOTlmZTUyOCIsIm9yZ192YXQiOiIxNTM3NjM3MTAwOSIsIm9yZ19uYW1lIjoiRW50ZSBkaSB0ZXN0IElkUGF5Iiwib3JnX3BhcnR5X3JvbGUiOiJTVUJfREVMRUdBVEUiLCJvcmdfcm9sZSI6InBhZ29wYV9hZG1pbiJ9.NQDgDxoVCpxcHp2NxKvIiqwvMtTMuNIAAhQuQ-IalWxvjbDjw9bZdX7n5E4eKuaqFvkOqKHXAe3bF5iHpM716A6Dq7jXwm6DFgFvz_lR27f1CrO74gUxntqaPm674ve1Mk2pGaYcOSMItcLugM7Zb9_xaLYBpdqw1V2KrA9J-Sf3w7lURrbkQS9sz8ebSQLeX5hIHys9x3dZm5QB85qftyHRWCBQip55bh_2Bnizu4WDTWjKbghIPGUkEWsAQyxwp--_POvIL1Cp3hp1o9aJx1S3Vbd1Y8IwwRnRnkXiG31feAnpxi_V7XC4G4o-At5senfAAXmdkv8qlaoIxT1JFw"
    },
    {
      "key": "serviceName",
      "value": "Test funzionali App IO QRCODE 13-12-2023 04:01"
    },
    {
      "key": "description",
      "value": "Illum enim sint."
    },
    {
      "key": "channel_type",
      "value": "web"
    },
    {
      "key": "channel_contact",
      "value": "http://ebba.info"
    },
    {
      "key": "budget",
      "value": 50000
    },
    {
      "key": "beneficiaryType",
      "value": "PF"
    },
    {
      "key": "beneficiaryKnown",
      "value": false
    },
    {
      "key": "rankingEnabled",
      "value": false
    },
    {
      "key": "beneficiaryBudget",
      "value": 10000
    },
    {
      "key": "rankingStartDate",
      "value": "2023-12-13"
    },
    {
      "key": "rankingEndDate",
      "value": "2024-01-13"
    },
    {
      "key": "startDate",
      "value": "2023-12-13"
    },
    {
      "key": "endDate",
      "value": "2024-03-13"
    },
    {
      "key": "rewardRuleType",
      "value": "rewardValue"
    },
    {
      "key": "rewardValueType",
      "value": "PERCENTAGE"
    },
    {
      "key": "rewardRuleValue",
      "value": 100
    },
    {
      "key": "trxDaysOfWeek",
      "value": "FRIDAY"
    },
    {
      "key": "trxDayEndTime",
      "value": "15:01:46.587"
    },
    {
      "key": "trxThresholdFrom",
      "value": 5000
    },
    {
      "key": "trxThresholdTo",
      "value": 8000
    },
    {
      "key": "trxCountFrom",
      "value": 3
    },
    {
      "key": "trxCountTo",
      "value": 11
    },
    {
      "key": "trxRewardLimitFrequency",
      "value": "DAILY"
    },
    {
      "key": "trxRewardLimitValue",
      "value": 3
    },
    {
      "key": "body",
      "value": ""
    },
    {
      "key": "merchantId",
      "value": "3a602b17-ac1c-3029-9e78-0a4bbb8693d4"
    },
    {
      "key": "user_fake",
      "value": "userFake"
    },
    {
      "key": "initiativeId_fake",
      "value": "initiativeIdFake",
      "type": "string"
    },
    {
      "key": "token_fake",
      "value": "tokenFake",
      "type": "string"
    },
    {
      "key": "trxCode_fake",
      "value": "trxCodeFake",
      "type": "string"
    },
    {
      "key": "merchantPortalToken",
      "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MDI0Nzk3MzUsImV4cCI6MTcwMjUwODUzNSwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0IiwiYWNxdWlyZXJfaWQiOiJQQUdPUEEiLCJtZXJjaGFudF9pZCI6IjNhNjAyYjE3LWFjMWMtMzAyOS05ZTc4LTBhNGJiYjg2OTNkNCIsIm9yZ19pZCI6IjJiNDhiZjk2LWZkNzQtNDc3ZS1hNzBhLTI4NmI0MTBmMDIwYSIsIm9yZ192YXQiOiIzMzQ0NDQzMzQ4OCIsIm9yZ19uYW1lIjoiRXNlcmNlbnRlIGRpIHRlc3QgSWRQYXkiLCJvcmdfcGFydHlfcm9sZSI6Ik1BTkFHRVIiLCJvcmdfcm9sZSI6ImFkbWluIn0.o7mPKH0fLnO8c91dYf_xVmT37y-TzEW8KxEXJdZ2aXRi5jKYgGr3GVe5xvtBS7LjXW0dVQrRgWNflntzotGT9PfUZQrImFZDXvj2MwQE-2MnDkpZEf0unMMrXes4MZyo_xLhUQlue7xhQKuOqfOtVxukFEsJk4eAjJYksa84TOaQzgaGmVaSp8LZjH0wOqMQ2o6xx8y3FDlnUrdYZIQRLclKE6N_AXhHgrMk5G5Qco2gzECQ6kcn0SIugV7EbwtDTwPo5bkRgtnDRVDWYIAkjYyNLG6rb502dO-QUuDw3BUuf1ksM0cb4GEVJGXmXGSGihMdDFnDLElpt2Gibsxjsg"
    },
    {
      "key": "effectiveAmountCents",
      "value": 7000
    },
    {
      "key": "rewardAmountCents",
      "value": 3000
    },
    {
      "key": "initiativeId_exhausted",
      "value": "6579c757dcfe31699a2b56b8"
    },
    {
      "key": "transactionId_fake",
      "value": "transactionId_fake"
    },
    {
      "key": "idTrxAcquirer",
      "value": "651713d5-d567-4993-882a-7e4e3e9e8f4c",
      "type": "string"
    },
    {
      "key": "merchantFiscalCode",
      "value": "33444433488"
    },
    {
      "key": "merchantFiscalCode_fake",
      "value": "12345",
      "type": "string"
    },
    {
      "key": "trxId",
      "value": "4398ab28-386f-4a04-a7b5-a81cf1d05131_1700756175881"
    },
    {
      "key": "trx_Id",
      "value": "12345",
      "type": "string"
    },
    {
      "key": "acquirerId",
      "value": "PAGOPA",
      "type": "string"
    },
    {
      "key": "initiativeId_not_started",
      "value": "6579c5c7dcfe31699a2b56ac"
    },
    {
      "key": "beneficiaryRuleDroolsSyncMillis_DEV",
      "value": "2000",
      "type": "string"
    },
    {
      "key": "rewardRuleDroolsSyncMillis_DEV",
      "value": "2000",
      "type": "string"
    },
    {
      "key": "rewardRuleDroolsSyncMillis_UAT",
      "value": "20000",
      "type": "string"
    },
    {
      "key": "beneficiaryRuleDroolsSyncMillis_UAT",
      "value": "20000",
      "type": "string"
    },
    {
      "key": "trxCode1",
      "value": ""
    },
    {
      "key": "trxCode2",
      "value": ""
    },
    {
      "key": "wait",
      "value": "1000",
      "type": "string"
    }
  ]
}
